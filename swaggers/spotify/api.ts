/* tslint:disable */
/* eslint-disable */
/**
 * Spotify Web API
 * You can use Spotify\'s Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more. Browse our available Web API endpoints using the sidebar at left, or via the navigation bar on top of this page on smaller screens.  In order to make successful Web API requests your app will need a valid access token. One can be obtained through <a href=\"https://developer.spotify.com/documentation/general/guides/authorization-guide/\">OAuth 2.0</a>.  The base URI for all Web API requests is `https://api.spotify.com/v1`.  Need help? See our <a href=\"https://developer.spotify.com/documentation/web-api/guides/\">Web API guides</a> for more information, or visit the <a href=\"https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer\">Spotify for Developers community forum</a> to ask questions and connect with other developers. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddTracksToPlaylistRequest
 */
export interface AddTracksToPlaylistRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) to add. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\", \"spotify:episode:512ojhOuo1ktJprKbVcKyQ\"]}`<br/>A maximum of 100 items can be added in one request. _**Note**: if the `uris` parameter is present in the query string, any URIs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof AddTracksToPlaylistRequest
     */
    'uris'?: Array<string>;
    /**
     * The position to insert the items, a zero-based index. For example, to insert the items in the first position: `position=0` ; to insert the items in the third position: `position=2`. If omitted, the items will be appended to the playlist. Items are added in the order they appear in the uris array. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\",\"spotify:track:1301WleyT98MSxVHPZCA6M\"], \"position\": 3}` 
     * @type {number}
     * @memberof AddTracksToPlaylistRequest
     */
    'position'?: number;
}
/**
 * 
 * @export
 * @interface AlbumBase
 */
export interface AlbumBase {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'album_type': AlbumBaseAlbumTypeEnum;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof AlbumBase
     */
    'total_tracks': number;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof AlbumBase
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof AlbumBase
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AlbumBase
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof AlbumBase
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof AlbumBase
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof AlbumBase
     */
    'release_date_precision': AlbumBaseReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumRestrictionObject}
     * @memberof AlbumBase
     */
    'restrictions'?: AlbumRestrictionObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof AlbumBase
     */
    'type': AlbumBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumBase
     */
    'uri': string;
}

export const AlbumBaseAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type AlbumBaseAlbumTypeEnum = typeof AlbumBaseAlbumTypeEnum[keyof typeof AlbumBaseAlbumTypeEnum];
export const AlbumBaseReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type AlbumBaseReleaseDatePrecisionEnum = typeof AlbumBaseReleaseDatePrecisionEnum[keyof typeof AlbumBaseReleaseDatePrecisionEnum];
export const AlbumBaseTypeEnum = {
    Album: 'album'
} as const;

export type AlbumBaseTypeEnum = typeof AlbumBaseTypeEnum[keyof typeof AlbumBaseTypeEnum];

/**
 * 
 * @export
 * @interface AlbumObject
 */
export interface AlbumObject {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'album_type': AlbumObjectAlbumTypeEnum;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof AlbumObject
     */
    'total_tracks': number;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof AlbumObject
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof AlbumObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AlbumObject
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof AlbumObject
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof AlbumObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof AlbumObject
     */
    'release_date_precision': AlbumObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumRestrictionObject}
     * @memberof AlbumObject
     */
    'restrictions'?: AlbumRestrictionObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof AlbumObject
     */
    'type': AlbumObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'uri': string;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof AlbumObject
     */
    'artists': Array<SimplifiedArtistObject>;
    /**
     * 
     * @type {AlbumObjectAllOfTracks}
     * @memberof AlbumObject
     */
    'tracks': AlbumObjectAllOfTracks;
    /**
     * The copyright statements of the album. 
     * @type {Array<CopyrightObject>}
     * @memberof AlbumObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * 
     * @type {AlbumObjectAllOfExternalIds}
     * @memberof AlbumObject
     */
    'external_ids': AlbumObjectAllOfExternalIds;
    /**
     * A list of the genres the album is associated with. If not yet classified, the array is empty. 
     * @type {Array<string>}
     * @memberof AlbumObject
     */
    'genres': Array<string>;
    /**
     * The label associated with the album. 
     * @type {string}
     * @memberof AlbumObject
     */
    'label': string;
    /**
     * The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. 
     * @type {number}
     * @memberof AlbumObject
     */
    'popularity': number;
}

export const AlbumObjectAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type AlbumObjectAlbumTypeEnum = typeof AlbumObjectAlbumTypeEnum[keyof typeof AlbumObjectAlbumTypeEnum];
export const AlbumObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type AlbumObjectReleaseDatePrecisionEnum = typeof AlbumObjectReleaseDatePrecisionEnum[keyof typeof AlbumObjectReleaseDatePrecisionEnum];
export const AlbumObjectTypeEnum = {
    Album: 'album'
} as const;

export type AlbumObjectTypeEnum = typeof AlbumObjectTypeEnum[keyof typeof AlbumObjectTypeEnum];

/**
 * Known external IDs for the album. 
 * @export
 * @interface AlbumObjectAllOfExternalIds
 */
export interface AlbumObjectAllOfExternalIds {
    /**
     * [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code) 
     * @type {string}
     * @memberof AlbumObjectAllOfExternalIds
     */
    'isrc'?: string;
    /**
     * [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29) 
     * @type {string}
     * @memberof AlbumObjectAllOfExternalIds
     */
    'ean'?: string;
    /**
     * [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code) 
     * @type {string}
     * @memberof AlbumObjectAllOfExternalIds
     */
    'upc'?: string;
}
/**
 * The tracks of the album. 
 * @export
 * @interface AlbumObjectAllOfTracks
 */
export interface AlbumObjectAllOfTracks {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof AlbumObjectAllOfTracks
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof AlbumObjectAllOfTracks
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof AlbumObjectAllOfTracks
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof AlbumObjectAllOfTracks
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof AlbumObjectAllOfTracks
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof AlbumObjectAllOfTracks
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedTrackObject>}
     * @memberof AlbumObjectAllOfTracks
     */
    'items': Array<SimplifiedTrackObject>;
}
/**
 * 
 * @export
 * @interface AlbumRestrictionObject
 */
export interface AlbumRestrictionObject {
    /**
     * The reason for the restriction. Albums may be restricted if the content is not available in a given market, to the user\'s subscription type, or when the user\'s account is set to not play explicit content. Additional reasons may be added in the future. 
     * @type {string}
     * @memberof AlbumRestrictionObject
     */
    'reason'?: AlbumRestrictionObjectReasonEnum;
}

export const AlbumRestrictionObjectReasonEnum = {
    Market: 'market',
    Product: 'product',
    Explicit: 'explicit'
} as const;

export type AlbumRestrictionObjectReasonEnum = typeof AlbumRestrictionObjectReasonEnum[keyof typeof AlbumRestrictionObjectReasonEnum];

/**
 * 
 * @export
 * @interface ArtistDiscographyAlbumObject
 */
export interface ArtistDiscographyAlbumObject {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'album_type': ArtistDiscographyAlbumObjectAlbumTypeEnum;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof ArtistDiscographyAlbumObject
     */
    'total_tracks': number;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof ArtistDiscographyAlbumObject
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ArtistDiscographyAlbumObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ArtistDiscographyAlbumObject
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'release_date_precision': ArtistDiscographyAlbumObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumRestrictionObject}
     * @memberof ArtistDiscographyAlbumObject
     */
    'restrictions'?: AlbumRestrictionObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'type': ArtistDiscographyAlbumObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'uri': string;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof ArtistDiscographyAlbumObject
     */
    'artists': Array<SimplifiedArtistObject>;
    /**
     * This field describes the relationship between the artist and the album. 
     * @type {string}
     * @memberof ArtistDiscographyAlbumObject
     */
    'album_group': ArtistDiscographyAlbumObjectAlbumGroupEnum;
}

export const ArtistDiscographyAlbumObjectAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type ArtistDiscographyAlbumObjectAlbumTypeEnum = typeof ArtistDiscographyAlbumObjectAlbumTypeEnum[keyof typeof ArtistDiscographyAlbumObjectAlbumTypeEnum];
export const ArtistDiscographyAlbumObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type ArtistDiscographyAlbumObjectReleaseDatePrecisionEnum = typeof ArtistDiscographyAlbumObjectReleaseDatePrecisionEnum[keyof typeof ArtistDiscographyAlbumObjectReleaseDatePrecisionEnum];
export const ArtistDiscographyAlbumObjectTypeEnum = {
    Album: 'album'
} as const;

export type ArtistDiscographyAlbumObjectTypeEnum = typeof ArtistDiscographyAlbumObjectTypeEnum[keyof typeof ArtistDiscographyAlbumObjectTypeEnum];
export const ArtistDiscographyAlbumObjectAlbumGroupEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation',
    AppearsOn: 'appears_on'
} as const;

export type ArtistDiscographyAlbumObjectAlbumGroupEnum = typeof ArtistDiscographyAlbumObjectAlbumGroupEnum[keyof typeof ArtistDiscographyAlbumObjectAlbumGroupEnum];

/**
 * 
 * @export
 * @interface ArtistObject
 */
export interface ArtistObject {
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ArtistObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * 
     * @type {FollowersObject}
     * @memberof ArtistObject
     */
    'followers'?: FollowersObject;
    /**
     * A list of the genres the artist is associated with. If not yet classified, the array is empty. 
     * @type {Array<string>}
     * @memberof ArtistObject
     */
    'genres'?: Array<string>;
    /**
     * A link to the Web API endpoint providing full details of the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'id'?: string;
    /**
     * Images of the artist in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ArtistObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The name of the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'name'?: string;
    /**
     * The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist\'s popularity is calculated from the popularity of all the artist\'s tracks. 
     * @type {number}
     * @memberof ArtistObject
     */
    'popularity'?: number;
    /**
     * The object type. 
     * @type {string}
     * @memberof ArtistObject
     */
    'type'?: ArtistObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof ArtistObject
     */
    'uri'?: string;
}

export const ArtistObjectTypeEnum = {
    Artist: 'artist'
} as const;

export type ArtistObjectTypeEnum = typeof ArtistObjectTypeEnum[keyof typeof ArtistObjectTypeEnum];

/**
 * 
 * @export
 * @interface AudioAnalysisObject
 */
export interface AudioAnalysisObject {
    /**
     * 
     * @type {AudioAnalysisObjectMeta}
     * @memberof AudioAnalysisObject
     */
    'meta'?: AudioAnalysisObjectMeta;
    /**
     * 
     * @type {AudioAnalysisObjectTrack}
     * @memberof AudioAnalysisObject
     */
    'track'?: AudioAnalysisObjectTrack;
    /**
     * The time intervals of the bars throughout the track. A bar (or measure) is a segment of time defined as a given number of beats.
     * @type {Array<TimeIntervalObject>}
     * @memberof AudioAnalysisObject
     */
    'bars'?: Array<TimeIntervalObject>;
    /**
     * The time intervals of beats throughout the track. A beat is the basic time unit of a piece of music; for example, each tick of a metronome. Beats are typically multiples of tatums.
     * @type {Array<TimeIntervalObject>}
     * @memberof AudioAnalysisObject
     */
    'beats'?: Array<TimeIntervalObject>;
    /**
     * Sections are defined by large variations in rhythm or timbre, e.g. chorus, verse, bridge, guitar solo, etc. Each section contains its own descriptions of tempo, key, mode, time_signature, and loudness.
     * @type {Array<SectionObject>}
     * @memberof AudioAnalysisObject
     */
    'sections'?: Array<SectionObject>;
    /**
     * Each segment contains a roughly conisistent sound throughout its duration.
     * @type {Array<SegmentObject>}
     * @memberof AudioAnalysisObject
     */
    'segments'?: Array<SegmentObject>;
    /**
     * A tatum represents the lowest regular pulse train that a listener intuitively infers from the timing of perceived musical events (segments).
     * @type {Array<TimeIntervalObject>}
     * @memberof AudioAnalysisObject
     */
    'tatums'?: Array<TimeIntervalObject>;
}
/**
 * 
 * @export
 * @interface AudioAnalysisObjectMeta
 */
export interface AudioAnalysisObjectMeta {
    /**
     * The version of the Analyzer used to analyze this track.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'analyzer_version'?: string;
    /**
     * The platform used to read the track\'s audio data.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'platform'?: string;
    /**
     * A detailed status code for this track. If analysis data is missing, this code may explain why.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'detailed_status'?: string;
    /**
     * The return code of the analyzer process. 0 if successful, 1 if any errors occurred.
     * @type {number}
     * @memberof AudioAnalysisObjectMeta
     */
    'status_code'?: number;
    /**
     * The Unix timestamp (in seconds) at which this track was analyzed.
     * @type {number}
     * @memberof AudioAnalysisObjectMeta
     */
    'timestamp'?: number;
    /**
     * The amount of time taken to analyze this track.
     * @type {number}
     * @memberof AudioAnalysisObjectMeta
     */
    'analysis_time'?: number;
    /**
     * The method used to read the track\'s audio data.
     * @type {string}
     * @memberof AudioAnalysisObjectMeta
     */
    'input_process'?: string;
}
/**
 * 
 * @export
 * @interface AudioAnalysisObjectTrack
 */
export interface AudioAnalysisObjectTrack {
    /**
     * The exact number of audio samples analyzed from this track. See also `analysis_sample_rate`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'num_samples'?: number;
    /**
     * Length of the track in seconds.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'duration'?: number;
    /**
     * This field will always contain the empty string.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'sample_md5'?: string;
    /**
     * An offset to the start of the region of the track that was analyzed. (As the entire track is analyzed, this should always be 0.)
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'offset_seconds'?: number;
    /**
     * The length of the region of the track was analyzed, if a subset of the track was analyzed. (As the entire track is analyzed, this should always be 0.)
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'window_seconds'?: number;
    /**
     * The sample rate used to decode and analyze this track. May differ from the actual sample rate of this track available on Spotify.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'analysis_sample_rate'?: number;
    /**
     * The number of channels used for analysis. If 1, all channels are summed together to mono before analysis.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'analysis_channels'?: number;
    /**
     * The time, in seconds, at which the track\'s fade-in period ends. If the track has no fade-in, this will be 0.0.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'end_of_fade_in'?: number;
    /**
     * The time, in seconds, at which the track\'s fade-out period starts. If the track has no fade-out, this should match the track\'s length.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'start_of_fade_out'?: number;
    /**
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'loudness'?: number;
    /**
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'tempo'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `tempo`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'tempo_confidence'?: number;
    /**
     * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'time_signature'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'time_signature_confidence'?: number;
    /**
     * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'key'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `key`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'key_confidence'?: number;
    /**
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'mode'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'mode_confidence'?: number;
    /**
     * An [Echo Nest Musical Fingerprint (ENMFP)](https://academiccommons.columbia.edu/doi/10.7916/D8Q248M4) codestring for this track.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'codestring'?: string;
    /**
     * A version number for the Echo Nest Musical Fingerprint format used in the codestring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'code_version'?: number;
    /**
     * An [EchoPrint](https://github.com/spotify/echoprint-codegen) codestring for this track.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'echoprintstring'?: string;
    /**
     * A version number for the EchoPrint format used in the echoprintstring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'echoprint_version'?: number;
    /**
     * A [Synchstring](https://github.com/echonest/synchdata) for this track.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'synchstring'?: string;
    /**
     * A version number for the Synchstring used in the synchstring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'synch_version'?: number;
    /**
     * A Rhythmstring for this track. The format of this string is similar to the Synchstring.
     * @type {string}
     * @memberof AudioAnalysisObjectTrack
     */
    'rhythmstring'?: string;
    /**
     * A version number for the Rhythmstring used in the rhythmstring field.
     * @type {number}
     * @memberof AudioAnalysisObjectTrack
     */
    'rhythm_version'?: number;
}
/**
 * 
 * @export
 * @interface AudioFeaturesObject
 */
export interface AudioFeaturesObject {
    /**
     * A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'acousticness'?: number;
    /**
     * A URL to access the full audio analysis of this track. An access token is required to access this data. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'analysis_url'?: string;
    /**
     * Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'danceability'?: number;
    /**
     * The duration of the track in milliseconds. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'duration_ms'?: number;
    /**
     * Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'energy'?: number;
    /**
     * The Spotify ID for the track. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'id'?: string;
    /**
     * Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'instrumentalness'?: number;
    /**
     * The key the track is in. Integers map to pitches using standard [Pitch Class notation](https://en.wikipedia.org/wiki/Pitch_class). E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'key'?: number;
    /**
     * Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'liveness'?: number;
    /**
     * The overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'loudness'?: number;
    /**
     * Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'mode'?: number;
    /**
     * Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'speechiness'?: number;
    /**
     * The overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration. 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'tempo'?: number;
    /**
     * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'time_signature'?: number;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'track_href'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'type'?: AudioFeaturesObjectTypeEnum;
    /**
     * The Spotify URI for the track. 
     * @type {string}
     * @memberof AudioFeaturesObject
     */
    'uri'?: string;
    /**
     * A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry). 
     * @type {number}
     * @memberof AudioFeaturesObject
     */
    'valence'?: number;
}

export const AudioFeaturesObjectTypeEnum = {
    AudioFeatures: 'audio_features'
} as const;

export type AudioFeaturesObjectTypeEnum = typeof AudioFeaturesObjectTypeEnum[keyof typeof AudioFeaturesObjectTypeEnum];

/**
 * 
 * @export
 * @interface AudiobookBase
 */
export interface AudiobookBase {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof AudiobookBase
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof AudiobookBase
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof AudiobookBase
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'description': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'html_description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof AudiobookBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof AudiobookBase
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AudiobookBase
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof AudiobookBase
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof AudiobookBase
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'type': AudiobookBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookBase
     */
    'uri': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof AudiobookBase
     */
    'total_chapters': number;
}

export const AudiobookBaseTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type AudiobookBaseTypeEnum = typeof AudiobookBaseTypeEnum[keyof typeof AudiobookBaseTypeEnum];

/**
 * 
 * @export
 * @interface AudiobookObject
 */
export interface AudiobookObject {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof AudiobookObject
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof AudiobookObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof AudiobookObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'description': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'html_description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof AudiobookObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof AudiobookObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof AudiobookObject
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof AudiobookObject
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof AudiobookObject
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'type': AudiobookObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof AudiobookObject
     */
    'uri': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof AudiobookObject
     */
    'total_chapters': number;
    /**
     * 
     * @type {AudiobookObjectAllOfChapters}
     * @memberof AudiobookObject
     */
    'chapters': AudiobookObjectAllOfChapters;
}

export const AudiobookObjectTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type AudiobookObjectTypeEnum = typeof AudiobookObjectTypeEnum[keyof typeof AudiobookObjectTypeEnum];

/**
 * The chapters of the audiobook. 
 * @export
 * @interface AudiobookObjectAllOfChapters
 */
export interface AudiobookObjectAllOfChapters {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof AudiobookObjectAllOfChapters
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof AudiobookObjectAllOfChapters
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof AudiobookObjectAllOfChapters
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof AudiobookObjectAllOfChapters
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof AudiobookObjectAllOfChapters
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof AudiobookObjectAllOfChapters
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedChapterObject>}
     * @memberof AudiobookObjectAllOfChapters
     */
    'items': Array<SimplifiedChapterObject>;
}
/**
 * 
 * @export
 * @interface AuthorObject
 */
export interface AuthorObject {
    /**
     * The name of the author. 
     * @type {string}
     * @memberof AuthorObject
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface CategoryObject
 */
export interface CategoryObject {
    /**
     * A link to the Web API endpoint returning full details of the category. 
     * @type {string}
     * @memberof CategoryObject
     */
    'href': string;
    /**
     * The category icon, in various sizes. 
     * @type {Array<ImageObject>}
     * @memberof CategoryObject
     */
    'icons': Array<ImageObject>;
    /**
     * The [Spotify category ID](/documentation/web-api/concepts/spotify-uris-ids) of the category. 
     * @type {string}
     * @memberof CategoryObject
     */
    'id': string;
    /**
     * The name of the category. 
     * @type {string}
     * @memberof CategoryObject
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ChangePlaylistDetailsRequest
 */
export interface ChangePlaylistDetailsRequest {
    [key: string]: any;

    /**
     * The new name for the playlist, for example `\"My New Playlist Title\"` 
     * @type {string}
     * @memberof ChangePlaylistDetailsRequest
     */
    'name'?: string;
    /**
     * If `true` the playlist will be public, if `false` it will be private. 
     * @type {boolean}
     * @memberof ChangePlaylistDetailsRequest
     */
    'public'?: boolean;
    /**
     * If `true`, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client. <br/> _**Note**: You can only set `collaborative` to `true` on non-public playlists._ 
     * @type {boolean}
     * @memberof ChangePlaylistDetailsRequest
     */
    'collaborative'?: boolean;
    /**
     * Value for playlist description as displayed in Spotify Clients and in the Web API. 
     * @type {string}
     * @memberof ChangePlaylistDetailsRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ChapterBase
 */
export interface ChapterBase {
    /**
     * A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available. 
     * @type {string}
     * @memberof ChapterBase
     */
    'audio_preview_url': string | null;
    /**
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ChapterBase
     */
    'available_markets'?: Array<string>;
    /**
     * The number of the chapter 
     * @type {number}
     * @memberof ChapterBase
     */
    'chapter_number': number;
    /**
     * A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ChapterBase
     */
    'description': string;
    /**
     * A description of the chapter. This field may contain HTML tags. 
     * @type {string}
     * @memberof ChapterBase
     */
    'html_description': string;
    /**
     * The chapter length in milliseconds. 
     * @type {number}
     * @memberof ChapterBase
     */
    'duration_ms': number;
    /**
     * Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ChapterBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ChapterBase
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the chapter. 
     * @type {string}
     * @memberof ChapterBase
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
     * @type {string}
     * @memberof ChapterBase
     */
    'id': string;
    /**
     * The cover art for the chapter in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ChapterBase
     */
    'images': Array<ImageObject>;
    /**
     * True if the chapter is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof ChapterBase
     */
    'is_playable': boolean;
    /**
     * A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ChapterBase
     */
    'languages': Array<string>;
    /**
     * The name of the chapter. 
     * @type {string}
     * @memberof ChapterBase
     */
    'name': string;
    /**
     * The date the chapter was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof ChapterBase
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof ChapterBase
     */
    'release_date_precision': ChapterBaseReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ResumePointObject}
     * @memberof ChapterBase
     */
    'resume_point': ResumePointObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof ChapterBase
     */
    'type': ChapterBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
     * @type {string}
     * @memberof ChapterBase
     */
    'uri': string;
    /**
     * 
     * @type {ChapterRestrictionObject}
     * @memberof ChapterBase
     */
    'restrictions'?: ChapterRestrictionObject;
}

export const ChapterBaseReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type ChapterBaseReleaseDatePrecisionEnum = typeof ChapterBaseReleaseDatePrecisionEnum[keyof typeof ChapterBaseReleaseDatePrecisionEnum];
export const ChapterBaseTypeEnum = {
    Episode: 'episode'
} as const;

export type ChapterBaseTypeEnum = typeof ChapterBaseTypeEnum[keyof typeof ChapterBaseTypeEnum];

/**
 * 
 * @export
 * @interface ChapterObject
 */
export interface ChapterObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available. 
     * @type {string}
     * @memberof ChapterObject
     */
    'audio_preview_url': string | null;
    /**
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ChapterObject
     */
    'available_markets'?: Array<string>;
    /**
     * The number of the chapter 
     * @type {number}
     * @memberof ChapterObject
     */
    'chapter_number': number;
    /**
     * A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ChapterObject
     */
    'description': string;
    /**
     * A description of the chapter. This field may contain HTML tags. 
     * @type {string}
     * @memberof ChapterObject
     */
    'html_description': string;
    /**
     * The chapter length in milliseconds. 
     * @type {number}
     * @memberof ChapterObject
     */
    'duration_ms': number;
    /**
     * Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ChapterObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ChapterObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the chapter. 
     * @type {string}
     * @memberof ChapterObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
     * @type {string}
     * @memberof ChapterObject
     */
    'id': string;
    /**
     * The cover art for the chapter in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ChapterObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the chapter is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof ChapterObject
     */
    'is_playable': boolean;
    /**
     * A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ChapterObject
     */
    'languages': Array<string>;
    /**
     * The name of the chapter. 
     * @type {string}
     * @memberof ChapterObject
     */
    'name': string;
    /**
     * The date the chapter was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof ChapterObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof ChapterObject
     */
    'release_date_precision': ChapterObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ResumePointObject}
     * @memberof ChapterObject
     */
    'resume_point': ResumePointObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof ChapterObject
     */
    'type': ChapterObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
     * @type {string}
     * @memberof ChapterObject
     */
    'uri': string;
    /**
     * 
     * @type {ChapterRestrictionObject}
     * @memberof ChapterObject
     */
    'restrictions'?: ChapterRestrictionObject;
    /**
     * 
     * @type {ChapterObjectAllOfAudiobook}
     * @memberof ChapterObject
     */
    'audiobook': ChapterObjectAllOfAudiobook;
}

export const ChapterObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type ChapterObjectReleaseDatePrecisionEnum = typeof ChapterObjectReleaseDatePrecisionEnum[keyof typeof ChapterObjectReleaseDatePrecisionEnum];
export const ChapterObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type ChapterObjectTypeEnum = typeof ChapterObjectTypeEnum[keyof typeof ChapterObjectTypeEnum];

/**
 * The audiobook for which the chapter belongs. 
 * @export
 * @interface ChapterObjectAllOfAudiobook
 */
export interface ChapterObjectAllOfAudiobook {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'description': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'html_description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'type': ChapterObjectAllOfAudiobookTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'uri': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof ChapterObjectAllOfAudiobook
     */
    'total_chapters': number;
}

export const ChapterObjectAllOfAudiobookTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type ChapterObjectAllOfAudiobookTypeEnum = typeof ChapterObjectAllOfAudiobookTypeEnum[keyof typeof ChapterObjectAllOfAudiobookTypeEnum];

/**
 * 
 * @export
 * @interface ChapterRestrictionObject
 */
export interface ChapterRestrictionObject {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content. - `payment_required` - Payment is required to play the content item.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof ChapterRestrictionObject
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface ContextObject
 */
export interface ContextObject {
    /**
     * The object type, e.g. \"artist\", \"playlist\", \"album\", \"show\". 
     * @type {string}
     * @memberof ContextObject
     */
    'type'?: string;
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof ContextObject
     */
    'href'?: string;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ContextObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the context. 
     * @type {string}
     * @memberof ContextObject
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface CopyrightObject
 */
export interface CopyrightObject {
    /**
     * The copyright text for this content. 
     * @type {string}
     * @memberof CopyrightObject
     */
    'text'?: string;
    /**
     * The type of copyright: `C` = the copyright, `P` = the sound recording (performance) copyright. 
     * @type {string}
     * @memberof CopyrightObject
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface CreatePlaylistRequest
 */
export interface CreatePlaylistRequest {
    [key: string]: any;

    /**
     * The name for the new playlist, for example `\"Your Coolest Playlist\"`. This name does not need to be unique; a user may have several playlists with the same name. 
     * @type {string}
     * @memberof CreatePlaylistRequest
     */
    'name': string;
    /**
     * Defaults to `true`. If `true` the playlist will be public, if `false` it will be private. To be able to create private playlists, the user must have granted the `playlist-modify-private` [scope](/documentation/web-api/concepts/scopes/#list-of-scopes) 
     * @type {boolean}
     * @memberof CreatePlaylistRequest
     */
    'public'?: boolean;
    /**
     * Defaults to `false`. If `true` the playlist will be collaborative. _**Note**: to create a collaborative playlist you must also set `public` to `false`. To create collaborative playlists you must have granted `playlist-modify-private` and `playlist-modify-public` [scopes](/documentation/web-api/concepts/scopes/#list-of-scopes)._ 
     * @type {boolean}
     * @memberof CreatePlaylistRequest
     */
    'collaborative'?: boolean;
    /**
     * value for playlist description as displayed in Spotify Clients and in the Web API. 
     * @type {string}
     * @memberof CreatePlaylistRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CurrentlyPlayingContextObject
 */
export interface CurrentlyPlayingContextObject {
    /**
     * 
     * @type {DeviceObject}
     * @memberof CurrentlyPlayingContextObject
     */
    'device'?: DeviceObject;
    /**
     * off, track, context
     * @type {string}
     * @memberof CurrentlyPlayingContextObject
     */
    'repeat_state'?: string;
    /**
     * If shuffle is on or off.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObject
     */
    'shuffle_state'?: boolean;
    /**
     * 
     * @type {ContextObject}
     * @memberof CurrentlyPlayingContextObject
     */
    'context'?: ContextObject;
    /**
     * Unix Millisecond Timestamp when data was fetched.
     * @type {number}
     * @memberof CurrentlyPlayingContextObject
     */
    'timestamp'?: number;
    /**
     * Progress into the currently playing track or episode. Can be `null`.
     * @type {number}
     * @memberof CurrentlyPlayingContextObject
     */
    'progress_ms'?: number;
    /**
     * If something is currently playing, return `true`.
     * @type {boolean}
     * @memberof CurrentlyPlayingContextObject
     */
    'is_playing'?: boolean;
    /**
     * 
     * @type {QueueObjectCurrentlyPlaying}
     * @memberof CurrentlyPlayingContextObject
     */
    'item'?: QueueObjectCurrentlyPlaying;
    /**
     * The object type of the currently playing item. Can be one of `track`, `episode`, `ad` or `unknown`. 
     * @type {string}
     * @memberof CurrentlyPlayingContextObject
     */
    'currently_playing_type'?: string;
    /**
     * 
     * @type {DisallowsObject}
     * @memberof CurrentlyPlayingContextObject
     */
    'actions'?: DisallowsObject;
}
/**
 * 
 * @export
 * @interface CursorObject
 */
export interface CursorObject {
    /**
     * The cursor to use as key to find the next page of items.
     * @type {string}
     * @memberof CursorObject
     */
    'after'?: string;
    /**
     * The cursor to use as key to find the previous page of items.
     * @type {string}
     * @memberof CursorObject
     */
    'before'?: string;
}
/**
 * 
 * @export
 * @interface CursorPagingObject
 */
export interface CursorPagingObject {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof CursorPagingObject
     */
    'href'?: string;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof CursorPagingObject
     */
    'limit'?: number;
    /**
     * URL to the next page of items. ( `null` if none)
     * @type {string}
     * @memberof CursorPagingObject
     */
    'next'?: string;
    /**
     * 
     * @type {CursorObject}
     * @memberof CursorPagingObject
     */
    'cursors'?: CursorObject;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof CursorPagingObject
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface CursorPagingPlayHistoryObject
 */
export interface CursorPagingPlayHistoryObject {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof CursorPagingPlayHistoryObject
     */
    'href'?: string;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof CursorPagingPlayHistoryObject
     */
    'limit'?: number;
    /**
     * URL to the next page of items. ( `null` if none)
     * @type {string}
     * @memberof CursorPagingPlayHistoryObject
     */
    'next'?: string;
    /**
     * 
     * @type {CursorObject}
     * @memberof CursorPagingPlayHistoryObject
     */
    'cursors'?: CursorObject;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof CursorPagingPlayHistoryObject
     */
    'total'?: number;
    /**
     * 
     * @type {Array<PlayHistoryObject>}
     * @memberof CursorPagingPlayHistoryObject
     */
    'items'?: Array<PlayHistoryObject>;
}
/**
 * 
 * @export
 * @interface CursorPagingSimplifiedArtistObject
 */
export interface CursorPagingSimplifiedArtistObject {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'href'?: string;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'limit'?: number;
    /**
     * URL to the next page of items. ( `null` if none)
     * @type {string}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'next'?: string;
    /**
     * 
     * @type {CursorObject}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'cursors'?: CursorObject;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ArtistObject>}
     * @memberof CursorPagingSimplifiedArtistObject
     */
    'items'?: Array<ArtistObject>;
}
/**
 * 
 * @export
 * @interface DeviceObject
 */
export interface DeviceObject {
    /**
     * The device ID. This ID is unique and persistent to some extent. However, this is not guaranteed and any cached `device_id` should periodically be cleared out and refetched as necessary.
     * @type {string}
     * @memberof DeviceObject
     */
    'id'?: string | null;
    /**
     * If this device is the currently active device.
     * @type {boolean}
     * @memberof DeviceObject
     */
    'is_active'?: boolean;
    /**
     * If this device is currently in a private session.
     * @type {boolean}
     * @memberof DeviceObject
     */
    'is_private_session'?: boolean;
    /**
     * Whether controlling this device is restricted. At present if this is \"true\" then no Web API commands will be accepted by this device.
     * @type {boolean}
     * @memberof DeviceObject
     */
    'is_restricted'?: boolean;
    /**
     * A human-readable name for the device. Some devices have a name that the user can configure (e.g. \\\"Loudest speaker\\\") and some devices have a generic name associated with the manufacturer or device model.
     * @type {string}
     * @memberof DeviceObject
     */
    'name'?: string;
    /**
     * Device type, such as \"computer\", \"smartphone\" or \"speaker\".
     * @type {string}
     * @memberof DeviceObject
     */
    'type'?: string;
    /**
     * The current volume in percent.
     * @type {number}
     * @memberof DeviceObject
     */
    'volume_percent'?: number | null;
    /**
     * If this device can be used to set the volume.
     * @type {boolean}
     * @memberof DeviceObject
     */
    'supports_volume'?: boolean;
}
/**
 * 
 * @export
 * @interface DisallowsObject
 */
export interface DisallowsObject {
    /**
     * Interrupting playback. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'interrupting_playback'?: boolean;
    /**
     * Pausing. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'pausing'?: boolean;
    /**
     * Resuming. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'resuming'?: boolean;
    /**
     * Seeking playback location. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'seeking'?: boolean;
    /**
     * Skipping to the next context. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'skipping_next'?: boolean;
    /**
     * Skipping to the previous context. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'skipping_prev'?: boolean;
    /**
     * Toggling repeat context flag. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'toggling_repeat_context'?: boolean;
    /**
     * Toggling shuffle flag. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'toggling_shuffle'?: boolean;
    /**
     * Toggling repeat track flag. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'toggling_repeat_track'?: boolean;
    /**
     * Transfering playback between devices. Optional field.
     * @type {boolean}
     * @memberof DisallowsObject
     */
    'transferring_playback'?: boolean;
}
/**
 * 
 * @export
 * @interface EpisodeBase
 */
export interface EpisodeBase {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'audio_preview_url': string | null;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'description': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'html_description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof EpisodeBase
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof EpisodeBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof EpisodeBase
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof EpisodeBase
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is hosted outside of Spotify\'s CDN. 
     * @type {boolean}
     * @memberof EpisodeBase
     */
    'is_externally_hosted': boolean;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof EpisodeBase
     */
    'is_playable': boolean;
    /**
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
     * @type {string}
     * @memberof EpisodeBase
     * @deprecated
     */
    'language'?: string;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof EpisodeBase
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'release_date_precision': EpisodeBaseReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ResumePointObject}
     * @memberof EpisodeBase
     */
    'resume_point': ResumePointObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'type': EpisodeBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeBase
     */
    'uri': string;
    /**
     * 
     * @type {EpisodeRestrictionObject}
     * @memberof EpisodeBase
     */
    'restrictions'?: EpisodeRestrictionObject;
}

export const EpisodeBaseReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type EpisodeBaseReleaseDatePrecisionEnum = typeof EpisodeBaseReleaseDatePrecisionEnum[keyof typeof EpisodeBaseReleaseDatePrecisionEnum];
export const EpisodeBaseTypeEnum = {
    Episode: 'episode'
} as const;

export type EpisodeBaseTypeEnum = typeof EpisodeBaseTypeEnum[keyof typeof EpisodeBaseTypeEnum];

/**
 * 
 * @export
 * @interface EpisodeObject
 */
export interface EpisodeObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'audio_preview_url': string | null;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'description': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'html_description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof EpisodeObject
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof EpisodeObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof EpisodeObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof EpisodeObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is hosted outside of Spotify\'s CDN. 
     * @type {boolean}
     * @memberof EpisodeObject
     */
    'is_externally_hosted': boolean;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof EpisodeObject
     */
    'is_playable': boolean;
    /**
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
     * @type {string}
     * @memberof EpisodeObject
     * @deprecated
     */
    'language'?: string;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof EpisodeObject
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'release_date_precision': EpisodeObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ResumePointObject}
     * @memberof EpisodeObject
     */
    'resume_point': ResumePointObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'type': EpisodeObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof EpisodeObject
     */
    'uri': string;
    /**
     * 
     * @type {EpisodeRestrictionObject}
     * @memberof EpisodeObject
     */
    'restrictions'?: EpisodeRestrictionObject;
    /**
     * 
     * @type {EpisodeObjectAllOfShow}
     * @memberof EpisodeObject
     */
    'show': EpisodeObjectAllOfShow;
}

export const EpisodeObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type EpisodeObjectReleaseDatePrecisionEnum = typeof EpisodeObjectReleaseDatePrecisionEnum[keyof typeof EpisodeObjectReleaseDatePrecisionEnum];
export const EpisodeObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type EpisodeObjectTypeEnum = typeof EpisodeObjectTypeEnum[keyof typeof EpisodeObjectTypeEnum];

/**
 * The show on which the episode belongs. 
 * @export
 * @interface EpisodeObjectAllOfShow
 */
export interface EpisodeObjectAllOfShow {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof EpisodeObjectAllOfShow
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof EpisodeObjectAllOfShow
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'description': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'html_description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof EpisodeObjectAllOfShow
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof EpisodeObjectAllOfShow
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof EpisodeObjectAllOfShow
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof EpisodeObjectAllOfShow
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof EpisodeObjectAllOfShow
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'type': EpisodeObjectAllOfShowTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof EpisodeObjectAllOfShow
     */
    'uri': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof EpisodeObjectAllOfShow
     */
    'total_episodes': number;
}

export const EpisodeObjectAllOfShowTypeEnum = {
    Show: 'show'
} as const;

export type EpisodeObjectAllOfShowTypeEnum = typeof EpisodeObjectAllOfShowTypeEnum[keyof typeof EpisodeObjectAllOfShowTypeEnum];

/**
 * 
 * @export
 * @interface EpisodeRestrictionObject
 */
export interface EpisodeRestrictionObject {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof EpisodeRestrictionObject
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface ErrorObject
 */
export interface ErrorObject {
    /**
     * The HTTP status code (also returned in the response header; see [Response Status Codes](/documentation/web-api/concepts/api-calls#response-status-codes) for more information). 
     * @type {number}
     * @memberof ErrorObject
     */
    'status': number;
    /**
     * A short description of the cause of the error. 
     * @type {string}
     * @memberof ErrorObject
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ExplicitContentSettingsObject
 */
export interface ExplicitContentSettingsObject {
    /**
     * When `true`, indicates that explicit content should not be played. 
     * @type {boolean}
     * @memberof ExplicitContentSettingsObject
     */
    'filter_enabled'?: boolean;
    /**
     * When `true`, indicates that the explicit content setting is locked and can\'t be changed by the user. 
     * @type {boolean}
     * @memberof ExplicitContentSettingsObject
     */
    'filter_locked'?: boolean;
}
/**
 * 
 * @export
 * @interface ExternalIdObject
 */
export interface ExternalIdObject {
    /**
     * [International Standard Recording Code](http://en.wikipedia.org/wiki/International_Standard_Recording_Code) 
     * @type {string}
     * @memberof ExternalIdObject
     */
    'isrc'?: string;
    /**
     * [International Article Number](http://en.wikipedia.org/wiki/International_Article_Number_%28EAN%29) 
     * @type {string}
     * @memberof ExternalIdObject
     */
    'ean'?: string;
    /**
     * [Universal Product Code](http://en.wikipedia.org/wiki/Universal_Product_Code) 
     * @type {string}
     * @memberof ExternalIdObject
     */
    'upc'?: string;
}
/**
 * 
 * @export
 * @interface ExternalUrlObject
 */
export interface ExternalUrlObject {
    /**
     * The [Spotify URL](/documentation/web-api/concepts/spotify-uris-ids) for the object. 
     * @type {string}
     * @memberof ExternalUrlObject
     */
    'spotify'?: string;
}
/**
 * 
 * @export
 * @interface FollowArtistsUsersRequest
 */
export interface FollowArtistsUsersRequest {
    [key: string]: any;

    /**
     * A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof FollowArtistsUsersRequest
     */
    'ids': Array<string>;
}
/**
 * 
 * @export
 * @interface FollowPlaylistRequest
 */
export interface FollowPlaylistRequest {
    [key: string]: any;

    /**
     * Defaults to `true`. If `true` the playlist will be included in user\'s public playlists, if `false` it will remain private. 
     * @type {boolean}
     * @memberof FollowPlaylistRequest
     */
    'public'?: boolean;
}
/**
 * 
 * @export
 * @interface FollowersObject
 */
export interface FollowersObject {
    /**
     * This will always be set to null, as the Web API does not support it at the moment. 
     * @type {string}
     * @memberof FollowersObject
     */
    'href'?: string | null;
    /**
     * The total number of followers. 
     * @type {number}
     * @memberof FollowersObject
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface GetAUsersAvailableDevices200Response
 */
export interface GetAUsersAvailableDevices200Response {
    /**
     * 
     * @type {Array<DeviceObject>}
     * @memberof GetAUsersAvailableDevices200Response
     */
    'devices': Array<DeviceObject>;
}
/**
 * 
 * @export
 * @interface GetAnAlbum401Response
 */
export interface GetAnAlbum401Response {
    /**
     * 
     * @type {ErrorObject}
     * @memberof GetAnAlbum401Response
     */
    'error': ErrorObject;
}
/**
 * 
 * @export
 * @interface GetAnArtistsTopTracks200Response
 */
export interface GetAnArtistsTopTracks200Response {
    /**
     * 
     * @type {Array<TrackObject>}
     * @memberof GetAnArtistsTopTracks200Response
     */
    'tracks': Array<TrackObject>;
}
/**
 * 
 * @export
 * @interface GetAvailableMarkets200Response
 */
export interface GetAvailableMarkets200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetAvailableMarkets200Response
     */
    'markets'?: Array<string>;
}
/**
 * 
 * @export
 * @interface GetCategories200Response
 */
export interface GetCategories200Response {
    /**
     * 
     * @type {GetCategories200ResponseCategories}
     * @memberof GetCategories200Response
     */
    'categories': GetCategories200ResponseCategories;
}
/**
 * 
 * @export
 * @interface GetCategories200ResponseCategories
 */
export interface GetCategories200ResponseCategories {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof GetCategories200ResponseCategories
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof GetCategories200ResponseCategories
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof GetCategories200ResponseCategories
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof GetCategories200ResponseCategories
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof GetCategories200ResponseCategories
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof GetCategories200ResponseCategories
     */
    'total': number;
    /**
     * 
     * @type {Array<CategoryObject>}
     * @memberof GetCategories200ResponseCategories
     */
    'items': Array<CategoryObject>;
}
/**
 * 
 * @export
 * @interface GetFollowed200Response
 */
export interface GetFollowed200Response {
    /**
     * 
     * @type {CursorPagingSimplifiedArtistObject}
     * @memberof GetFollowed200Response
     */
    'artists': CursorPagingSimplifiedArtistObject;
}
/**
 * 
 * @export
 * @interface GetMultipleAlbums200Response
 */
export interface GetMultipleAlbums200Response {
    /**
     * 
     * @type {Array<AlbumObject>}
     * @memberof GetMultipleAlbums200Response
     */
    'albums': Array<AlbumObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleArtists200Response
 */
export interface GetMultipleArtists200Response {
    /**
     * 
     * @type {Array<ArtistObject>}
     * @memberof GetMultipleArtists200Response
     */
    'artists': Array<ArtistObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleAudiobooks200Response
 */
export interface GetMultipleAudiobooks200Response {
    /**
     * 
     * @type {Array<AudiobookObject>}
     * @memberof GetMultipleAudiobooks200Response
     */
    'audiobooks': Array<AudiobookObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleEpisodes200Response
 */
export interface GetMultipleEpisodes200Response {
    /**
     * 
     * @type {Array<EpisodeObject>}
     * @memberof GetMultipleEpisodes200Response
     */
    'episodes': Array<EpisodeObject>;
}
/**
 * 
 * @export
 * @interface GetMultipleShows200Response
 */
export interface GetMultipleShows200Response {
    /**
     * 
     * @type {Array<SimplifiedShowObject>}
     * @memberof GetMultipleShows200Response
     */
    'shows': Array<SimplifiedShowObject>;
}
/**
 * 
 * @export
 * @interface GetNewReleases200Response
 */
export interface GetNewReleases200Response {
    /**
     * 
     * @type {PagingSimplifiedAlbumObject}
     * @memberof GetNewReleases200Response
     */
    'albums': PagingSimplifiedAlbumObject;
}
/**
 * 
 * @export
 * @interface GetRecommendationGenres200Response
 */
export interface GetRecommendationGenres200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetRecommendationGenres200Response
     */
    'genres': Array<string>;
}
/**
 * 
 * @export
 * @interface GetSeveralAudioFeatures200Response
 */
export interface GetSeveralAudioFeatures200Response {
    /**
     * 
     * @type {Array<AudioFeaturesObject>}
     * @memberof GetSeveralAudioFeatures200Response
     */
    'audio_features': Array<AudioFeaturesObject>;
}
/**
 * 
 * @export
 * @interface GetSeveralChapters200Response
 */
export interface GetSeveralChapters200Response {
    /**
     * 
     * @type {Array<ChapterObject>}
     * @memberof GetSeveralChapters200Response
     */
    'chapters': Array<ChapterObject>;
}
/**
 * 
 * @export
 * @interface GetUsersTopArtistsAndTracks200Response
 */
export interface GetUsersTopArtistsAndTracks200Response {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof GetUsersTopArtistsAndTracks200Response
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof GetUsersTopArtistsAndTracks200Response
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof GetUsersTopArtistsAndTracks200Response
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof GetUsersTopArtistsAndTracks200Response
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof GetUsersTopArtistsAndTracks200Response
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof GetUsersTopArtistsAndTracks200Response
     */
    'total': number;
    /**
     * 
     * @type {Array<GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner>}
     * @memberof GetUsersTopArtistsAndTracks200Response
     */
    'items': Array<GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner>;
}
/**
 * @type GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner
 * @export
 */
export type GetUsersTopArtistsAndTracks200ResponseAllOfItemsInner = ArtistObject | TrackObject;

/**
 * 
 * @export
 * @interface ImageObject
 */
export interface ImageObject {
    /**
     * The source URL of the image. 
     * @type {string}
     * @memberof ImageObject
     */
    'url': string;
    /**
     * The image height in pixels. 
     * @type {number}
     * @memberof ImageObject
     */
    'height': number | null;
    /**
     * The image width in pixels. 
     * @type {number}
     * @memberof ImageObject
     */
    'width': number | null;
}
/**
 * 
 * @export
 * @interface LinkedTrackObject
 */
export interface LinkedTrackObject {
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof LinkedTrackObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'id'?: string;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof LinkedTrackObject
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface NarratorObject
 */
export interface NarratorObject {
    /**
     * The name of the Narrator. 
     * @type {string}
     * @memberof NarratorObject
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface PagingArtistDiscographyAlbumObject
 */
export interface PagingArtistDiscographyAlbumObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingArtistDiscographyAlbumObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingArtistDiscographyAlbumObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingArtistDiscographyAlbumObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingArtistDiscographyAlbumObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingArtistDiscographyAlbumObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingArtistDiscographyAlbumObject
     */
    'total': number;
    /**
     * 
     * @type {Array<ArtistDiscographyAlbumObject>}
     * @memberof PagingArtistDiscographyAlbumObject
     */
    'items': Array<ArtistDiscographyAlbumObject>;
}
/**
 * 
 * @export
 * @interface PagingArtistObject
 */
export interface PagingArtistObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingArtistObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingArtistObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingArtistObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingArtistObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingArtistObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingArtistObject
     */
    'total': number;
    /**
     * 
     * @type {Array<ArtistObject>}
     * @memberof PagingArtistObject
     */
    'items': Array<ArtistObject>;
}
/**
 * 
 * @export
 * @interface PagingFeaturedPlaylistObject
 */
export interface PagingFeaturedPlaylistObject {
    /**
     * The localized message of a playlist. 
     * @type {string}
     * @memberof PagingFeaturedPlaylistObject
     */
    'message'?: string;
    /**
     * 
     * @type {PagingPlaylistObject}
     * @memberof PagingFeaturedPlaylistObject
     */
    'playlists'?: PagingPlaylistObject;
}
/**
 * 
 * @export
 * @interface PagingObject
 */
export interface PagingObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingObject
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface PagingPlaylistObject
 */
export interface PagingPlaylistObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingPlaylistObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingPlaylistObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingPlaylistObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingPlaylistObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedPlaylistObject>}
     * @memberof PagingPlaylistObject
     */
    'items': Array<SimplifiedPlaylistObject>;
}
/**
 * 
 * @export
 * @interface PagingPlaylistTrackObject
 */
export interface PagingPlaylistTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingPlaylistTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingPlaylistTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingPlaylistTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingPlaylistTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingPlaylistTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<PlaylistTrackObject>}
     * @memberof PagingPlaylistTrackObject
     */
    'items': Array<PlaylistTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedAlbumObject
 */
export interface PagingSavedAlbumObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedAlbumObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedAlbumObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedAlbumObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedAlbumObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedAlbumObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedAlbumObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedAlbumObject>}
     * @memberof PagingSavedAlbumObject
     */
    'items': Array<SavedAlbumObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedEpisodeObject
 */
export interface PagingSavedEpisodeObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedEpisodeObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedEpisodeObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedEpisodeObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedEpisodeObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedEpisodeObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedEpisodeObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedEpisodeObject>}
     * @memberof PagingSavedEpisodeObject
     */
    'items': Array<SavedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedShowObject
 */
export interface PagingSavedShowObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedShowObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedShowObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedShowObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedShowObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedShowObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedShowObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedShowObject>}
     * @memberof PagingSavedShowObject
     */
    'items': Array<SavedShowObject>;
}
/**
 * 
 * @export
 * @interface PagingSavedTrackObject
 */
export interface PagingSavedTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSavedTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSavedTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSavedTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSavedTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSavedTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SavedTrackObject>}
     * @memberof PagingSavedTrackObject
     */
    'items': Array<SavedTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedAlbumObject
 */
export interface PagingSimplifiedAlbumObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedAlbumObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedAlbumObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAlbumObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedAlbumObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAlbumObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedAlbumObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedAlbumObject>}
     * @memberof PagingSimplifiedAlbumObject
     */
    'items': Array<SimplifiedAlbumObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedAudiobookObject
 */
export interface PagingSimplifiedAudiobookObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedAudiobookObject>}
     * @memberof PagingSimplifiedAudiobookObject
     */
    'items': Array<SimplifiedAudiobookObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedChapterObject
 */
export interface PagingSimplifiedChapterObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedChapterObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedChapterObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedChapterObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedChapterObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedChapterObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedChapterObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedChapterObject>}
     * @memberof PagingSimplifiedChapterObject
     */
    'items': Array<SimplifiedChapterObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedEpisodeObject
 */
export interface PagingSimplifiedEpisodeObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedEpisodeObject>}
     * @memberof PagingSimplifiedEpisodeObject
     */
    'items': Array<SimplifiedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedShowObject
 */
export interface PagingSimplifiedShowObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedShowObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedShowObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedShowObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedShowObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedShowObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedShowObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedShowObject>}
     * @memberof PagingSimplifiedShowObject
     */
    'items': Array<SimplifiedShowObject>;
}
/**
 * 
 * @export
 * @interface PagingSimplifiedTrackObject
 */
export interface PagingSimplifiedTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingSimplifiedTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingSimplifiedTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingSimplifiedTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingSimplifiedTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingSimplifiedTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedTrackObject>}
     * @memberof PagingSimplifiedTrackObject
     */
    'items': Array<SimplifiedTrackObject>;
}
/**
 * 
 * @export
 * @interface PagingTrackObject
 */
export interface PagingTrackObject {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof PagingTrackObject
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof PagingTrackObject
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingTrackObject
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof PagingTrackObject
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof PagingTrackObject
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof PagingTrackObject
     */
    'total': number;
    /**
     * 
     * @type {Array<TrackObject>}
     * @memberof PagingTrackObject
     */
    'items': Array<TrackObject>;
}
/**
 * 
 * @export
 * @interface PlayHistoryObject
 */
export interface PlayHistoryObject {
    /**
     * 
     * @type {TrackObject}
     * @memberof PlayHistoryObject
     */
    'track'?: TrackObject;
    /**
     * The date and time the track was played.
     * @type {Date}
     * @memberof PlayHistoryObject
     */
    'played_at'?: Date;
    /**
     * 
     * @type {ContextObject}
     * @memberof PlayHistoryObject
     */
    'context'?: ContextObject;
}
/**
 * 
 * @export
 * @interface PlaylistObject
 */
export interface PlaylistObject {
    /**
     * `true` if the owner allows other users to modify the playlist. 
     * @type {boolean}
     * @memberof PlaylistObject
     */
    'collaborative'?: boolean;
    /**
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'description'?: string | null;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof PlaylistObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * 
     * @type {FollowersObject}
     * @memberof PlaylistObject
     */
    'followers'?: FollowersObject;
    /**
     * A link to the Web API endpoint providing full details of the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'id'?: string;
    /**
     * Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 
     * @type {Array<ImageObject>}
     * @memberof PlaylistObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The name of the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'name'?: string;
    /**
     * 
     * @type {PlaylistOwnerObject}
     * @memberof PlaylistObject
     */
    'owner'?: PlaylistOwnerObject;
    /**
     * The playlist\'s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 
     * @type {boolean}
     * @memberof PlaylistObject
     */
    'public'?: boolean;
    /**
     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 
     * @type {string}
     * @memberof PlaylistObject
     */
    'snapshot_id'?: string;
    /**
     * 
     * @type {PagingPlaylistTrackObject}
     * @memberof PlaylistObject
     */
    'tracks'?: PagingPlaylistTrackObject;
    /**
     * The object type: \"playlist\" 
     * @type {string}
     * @memberof PlaylistObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof PlaylistObject
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface PlaylistOwnerObject
 */
export interface PlaylistOwnerObject {
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof PlaylistOwnerObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * 
     * @type {FollowersObject}
     * @memberof PlaylistOwnerObject
     */
    'followers'?: FollowersObject;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'id'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'type'?: PlaylistOwnerObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'uri'?: string;
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PlaylistOwnerObject
     */
    'display_name'?: string | null;
}

export const PlaylistOwnerObjectTypeEnum = {
    User: 'user'
} as const;

export type PlaylistOwnerObjectTypeEnum = typeof PlaylistOwnerObjectTypeEnum[keyof typeof PlaylistOwnerObjectTypeEnum];

/**
 * 
 * @export
 * @interface PlaylistTrackObject
 */
export interface PlaylistTrackObject {
    /**
     * The date and time the track or episode was added. _**Note**: some very old playlists may return `null` in this field._ 
     * @type {Date}
     * @memberof PlaylistTrackObject
     */
    'added_at'?: Date;
    /**
     * 
     * @type {PlaylistUserObject}
     * @memberof PlaylistTrackObject
     */
    'added_by'?: PlaylistUserObject;
    /**
     * Whether this track or episode is a [local file](/documentation/web-api/concepts/playlists/#local-files) or not. 
     * @type {boolean}
     * @memberof PlaylistTrackObject
     */
    'is_local'?: boolean;
    /**
     * 
     * @type {PlaylistTrackObjectTrack}
     * @memberof PlaylistTrackObject
     */
    'track'?: PlaylistTrackObjectTrack;
}
/**
 * @type PlaylistTrackObjectTrack
 * Information about the track or episode.
 * @export
 */
export type PlaylistTrackObjectTrack = EpisodeObject | TrackObject;

/**
 * 
 * @export
 * @interface PlaylistTracksRefObject
 */
export interface PlaylistTracksRefObject {
    /**
     * A link to the Web API endpoint where full details of the playlist\'s tracks can be retrieved. 
     * @type {string}
     * @memberof PlaylistTracksRefObject
     */
    'href'?: string;
    /**
     * Number of tracks in the playlist. 
     * @type {number}
     * @memberof PlaylistTracksRefObject
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface PlaylistUserObject
 */
export interface PlaylistUserObject {
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof PlaylistUserObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * 
     * @type {FollowersObject}
     * @memberof PlaylistUserObject
     */
    'followers'?: FollowersObject;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'id'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'type'?: PlaylistUserObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PlaylistUserObject
     */
    'uri'?: string;
}

export const PlaylistUserObjectTypeEnum = {
    User: 'user'
} as const;

export type PlaylistUserObjectTypeEnum = typeof PlaylistUserObjectTypeEnum[keyof typeof PlaylistUserObjectTypeEnum];

/**
 * 
 * @export
 * @interface PrivateUserObject
 */
export interface PrivateUserObject {
    /**
     * The country of the user, as set in the user\'s account profile. An [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'country'?: string;
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'display_name'?: string;
    /**
     * The user\'s email address, as entered by the user when creating their account. _**Important!** This email address is unverified; there is no proof that it actually belongs to the user._ _This field is only available when the current user has granted access to the [user-read-email](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'email'?: string;
    /**
     * 
     * @type {ExplicitContentSettingsObject}
     * @memberof PrivateUserObject
     */
    'explicit_content'?: ExplicitContentSettingsObject;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof PrivateUserObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * 
     * @type {FollowersObject}
     * @memberof PrivateUserObject
     */
    'followers'?: FollowersObject;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for the user. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'id'?: string;
    /**
     * The user\'s profile image.
     * @type {Array<ImageObject>}
     * @memberof PrivateUserObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The user\'s Spotify subscription level: \"premium\", \"free\", etc. (The subscription level \"open\" can be considered the same as \"free\".) _This field is only available when the current user has granted access to the [user-read-private](/documentation/web-api/concepts/scopes/#list-of-scopes) scope._ 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'product'?: string;
    /**
     * The object type: \"user\" 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the user. 
     * @type {string}
     * @memberof PrivateUserObject
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface PublicUserObject
 */
export interface PublicUserObject {
    /**
     * The name displayed on the user\'s profile. `null` if not available. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'display_name'?: string | null;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof PublicUserObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * 
     * @type {FollowersObject}
     * @memberof PublicUserObject
     */
    'followers'?: FollowersObject;
    /**
     * A link to the Web API endpoint for this user. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'href'?: string;
    /**
     * The [Spotify user ID](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'id'?: string;
    /**
     * The user\'s profile image. 
     * @type {Array<ImageObject>}
     * @memberof PublicUserObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The object type. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'type'?: PublicUserObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for this user. 
     * @type {string}
     * @memberof PublicUserObject
     */
    'uri'?: string;
}

export const PublicUserObjectTypeEnum = {
    User: 'user'
} as const;

export type PublicUserObjectTypeEnum = typeof PublicUserObjectTypeEnum[keyof typeof PublicUserObjectTypeEnum];

/**
 * 
 * @export
 * @interface QueueObject
 */
export interface QueueObject {
    /**
     * 
     * @type {QueueObjectCurrentlyPlaying}
     * @memberof QueueObject
     */
    'currently_playing'?: QueueObjectCurrentlyPlaying;
    /**
     * The tracks or episodes in the queue. Can be empty.
     * @type {Array<QueueObjectQueueInner>}
     * @memberof QueueObject
     */
    'queue'?: Array<QueueObjectQueueInner>;
}
/**
 * @type QueueObjectCurrentlyPlaying
 * The currently playing track or episode. Can be `null`.
 * @export
 */
export type QueueObjectCurrentlyPlaying = EpisodeObject | TrackObject;

/**
 * @type QueueObjectQueueInner
 * @export
 */
export type QueueObjectQueueInner = EpisodeObject | TrackObject;

/**
 * 
 * @export
 * @interface RecommendationSeedObject
 */
export interface RecommendationSeedObject {
    /**
     * The number of tracks available after min\\_\\* and max\\_\\* filters have been applied. 
     * @type {number}
     * @memberof RecommendationSeedObject
     */
    'afterFilteringSize'?: number;
    /**
     * The number of tracks available after relinking for regional availability. 
     * @type {number}
     * @memberof RecommendationSeedObject
     */
    'afterRelinkingSize'?: number;
    /**
     * A link to the full track or artist data for this seed. For tracks this will be a link to a Track Object. For artists a link to an Artist Object. For genre seeds, this value will be `null`. 
     * @type {string}
     * @memberof RecommendationSeedObject
     */
    'href'?: string;
    /**
     * The id used to select this seed. This will be the same as the string used in the `seed_artists`, `seed_tracks` or `seed_genres` parameter. 
     * @type {string}
     * @memberof RecommendationSeedObject
     */
    'id'?: string;
    /**
     * The number of recommended tracks available for this seed. 
     * @type {number}
     * @memberof RecommendationSeedObject
     */
    'initialPoolSize'?: number;
    /**
     * The entity type of this seed. One of `artist`, `track` or `genre`. 
     * @type {string}
     * @memberof RecommendationSeedObject
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface RecommendationsObject
 */
export interface RecommendationsObject {
    /**
     * An array of recommendation seed objects. 
     * @type {Array<RecommendationSeedObject>}
     * @memberof RecommendationsObject
     */
    'seeds': Array<RecommendationSeedObject>;
    /**
     * An array of track object (simplified) ordered according to the parameters supplied. 
     * @type {Array<TrackObject>}
     * @memberof RecommendationsObject
     */
    'tracks': Array<TrackObject>;
}
/**
 * 
 * @export
 * @interface RemoveEpisodesUserRequest
 */
export interface RemoveEpisodesUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof RemoveEpisodesUserRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface RemoveTracksPlaylistRequest
 */
export interface RemoveTracksPlaylistRequest {
    /**
     * An array of objects containing [Spotify URIs](/documentation/web-api/concepts/spotify-uris-ids) of the tracks or episodes to remove. For example: `{ \"tracks\": [{ \"uri\": \"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\" },{ \"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\" }] }`. A maximum of 100 objects can be sent at once. 
     * @type {Array<RemoveTracksPlaylistRequestTracksInner>}
     * @memberof RemoveTracksPlaylistRequest
     */
    'tracks': Array<RemoveTracksPlaylistRequestTracksInner>;
    /**
     * The playlist\'s snapshot ID against which you want to make the changes. The API will validate that the specified items exist and in the specified positions and make the changes, even if more recent changes have been made to the playlist. 
     * @type {string}
     * @memberof RemoveTracksPlaylistRequest
     */
    'snapshot_id'?: string;
}
/**
 * 
 * @export
 * @interface RemoveTracksPlaylistRequestTracksInner
 */
export interface RemoveTracksPlaylistRequestTracksInner {
    /**
     * Spotify URI
     * @type {string}
     * @memberof RemoveTracksPlaylistRequestTracksInner
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface ReorderOrReplacePlaylistsTracks200Response
 */
export interface ReorderOrReplacePlaylistsTracks200Response {
    /**
     * 
     * @type {string}
     * @memberof ReorderOrReplacePlaylistsTracks200Response
     */
    'snapshot_id'?: string;
}
/**
 * 
 * @export
 * @interface ReorderOrReplacePlaylistsTracksRequest
 */
export interface ReorderOrReplacePlaylistsTracksRequest {
    [key: string]: any;

    /**
     * 
     * @type {Array<string>}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'uris'?: Array<string>;
    /**
     * The position of the first item to be reordered. 
     * @type {number}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'range_start'?: number;
    /**
     * The position where the items should be inserted.<br/>To reorder the items to the end of the playlist, simply set _insert_before_ to the position after the last item.<br/>Examples:<br/>To reorder the first item to the last position in a playlist with 10 items, set _range_start_ to 0, and _insert_before_ to 10.<br/>To reorder the last item in a playlist with 10 items to the start of the playlist, set _range_start_ to 9, and _insert_before_ to 0. 
     * @type {number}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'insert_before'?: number;
    /**
     * The amount of items to be reordered. Defaults to 1 if not set.<br/>The range of items to be reordered begins from the _range_start_ position, and includes the _range_length_ subsequent items.<br/>Example:<br/>To move the items at index 9-10 to the start of the playlist, _range_start_ is set to 9, and _range_length_ is set to 2. 
     * @type {number}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'range_length'?: number;
    /**
     * The playlist\'s snapshot ID against which you want to make the changes. 
     * @type {string}
     * @memberof ReorderOrReplacePlaylistsTracksRequest
     */
    'snapshot_id'?: string;
}
/**
 * 
 * @export
 * @interface ResumePointObject
 */
export interface ResumePointObject {
    /**
     * Whether or not the episode has been fully played by the user. 
     * @type {boolean}
     * @memberof ResumePointObject
     */
    'fully_played'?: boolean;
    /**
     * The user\'s most recent position in the episode in milliseconds. 
     * @type {number}
     * @memberof ResumePointObject
     */
    'resume_position_ms'?: number;
}
/**
 * 
 * @export
 * @interface SaveAlbumsUserRequest
 */
export interface SaveAlbumsUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof SaveAlbumsUserRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SaveEpisodesUserRequest
 */
export interface SaveEpisodesUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). <br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof SaveEpisodesUserRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SaveTracksUserRequest
 */
export interface SaveTracksUserRequest {
    [key: string]: any;

    /**
     * A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `[\"4iV5W9uYEdYUVa79Axb7Rh\", \"1301WleyT98MSxVHPZCA6M\"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof SaveTracksUserRequest
     */
    'ids'?: Array<string>;
}
/**
 * 
 * @export
 * @interface SavedAlbumObject
 */
export interface SavedAlbumObject {
    /**
     * The date and time the album was saved Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object. 
     * @type {Date}
     * @memberof SavedAlbumObject
     */
    'added_at'?: Date;
    /**
     * 
     * @type {AlbumObject}
     * @memberof SavedAlbumObject
     */
    'album'?: AlbumObject;
}
/**
 * 
 * @export
 * @interface SavedEpisodeObject
 */
export interface SavedEpisodeObject {
    /**
     * The date and time the episode was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. 
     * @type {Date}
     * @memberof SavedEpisodeObject
     */
    'added_at'?: Date;
    /**
     * 
     * @type {EpisodeObject}
     * @memberof SavedEpisodeObject
     */
    'episode'?: EpisodeObject;
}
/**
 * 
 * @export
 * @interface SavedShowObject
 */
export interface SavedShowObject {
    /**
     * The date and time the show was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object. 
     * @type {Date}
     * @memberof SavedShowObject
     */
    'added_at'?: Date;
    /**
     * 
     * @type {SimplifiedShowObject}
     * @memberof SavedShowObject
     */
    'show'?: SimplifiedShowObject;
}
/**
 * 
 * @export
 * @interface SavedTrackObject
 */
export interface SavedTrackObject {
    /**
     * The date and time the track was saved. Timestamps are returned in ISO 8601 format as Coordinated Universal Time (UTC) with a zero offset: YYYY-MM-DDTHH:MM:SSZ. If the time is imprecise (for example, the date/time of an album release), an additional field indicates the precision; see for example, release_date in an album object. 
     * @type {Date}
     * @memberof SavedTrackObject
     */
    'added_at'?: Date;
    /**
     * 
     * @type {TrackObject}
     * @memberof SavedTrackObject
     */
    'track'?: TrackObject;
}
/**
 * 
 * @export
 * @interface Search200Response
 */
export interface Search200Response {
    /**
     * 
     * @type {PagingTrackObject}
     * @memberof Search200Response
     */
    'tracks'?: PagingTrackObject;
    /**
     * 
     * @type {PagingArtistObject}
     * @memberof Search200Response
     */
    'artists'?: PagingArtistObject;
    /**
     * 
     * @type {PagingSimplifiedAlbumObject}
     * @memberof Search200Response
     */
    'albums'?: PagingSimplifiedAlbumObject;
    /**
     * 
     * @type {PagingPlaylistObject}
     * @memberof Search200Response
     */
    'playlists'?: PagingPlaylistObject;
    /**
     * 
     * @type {PagingSimplifiedShowObject}
     * @memberof Search200Response
     */
    'shows'?: PagingSimplifiedShowObject;
    /**
     * 
     * @type {PagingSimplifiedEpisodeObject}
     * @memberof Search200Response
     */
    'episodes'?: PagingSimplifiedEpisodeObject;
    /**
     * 
     * @type {PagingSimplifiedAudiobookObject}
     * @memberof Search200Response
     */
    'audiobooks'?: PagingSimplifiedAudiobookObject;
}
/**
 * 
 * @export
 * @interface SectionObject
 */
export interface SectionObject {
    /**
     * The starting point (in seconds) of the section.
     * @type {number}
     * @memberof SectionObject
     */
    'start'?: number;
    /**
     * The duration (in seconds) of the section.
     * @type {number}
     * @memberof SectionObject
     */
    'duration'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the section\'s \"designation\".
     * @type {number}
     * @memberof SectionObject
     */
    'confidence'?: number;
    /**
     * The overall loudness of the section in decibels (dB). Loudness values are useful for comparing relative loudness of sections within tracks.
     * @type {number}
     * @memberof SectionObject
     */
    'loudness'?: number;
    /**
     * The overall estimated tempo of the section in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.
     * @type {number}
     * @memberof SectionObject
     */
    'tempo'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the tempo. Some tracks contain tempo changes or sounds which don\'t contain tempo (like pure speech) which would correspond to a low value in this field.
     * @type {number}
     * @memberof SectionObject
     */
    'tempo_confidence'?: number;
    /**
     * The estimated overall key of the section. The values in this field ranging from 0 to 11 mapping to pitches using standard Pitch Class notation (E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on). If no key was detected, the value is -1.
     * @type {number}
     * @memberof SectionObject
     */
    'key'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the key. Songs with many key changes may correspond to low values in this field.
     * @type {number}
     * @memberof SectionObject
     */
    'key_confidence'?: number;
    /**
     * Indicates the modality (major or minor) of a section, the type of scale from which its melodic content is derived. This field will contain a 0 for \"minor\", a 1 for \"major\", or a -1 for no result. Note that the major key (e.g. C major) could more likely be confused with the minor key at 3 semitones lower (e.g. A minor) as both keys carry the same pitches.
     * @type {number}
     * @memberof SectionObject
     */
    'mode'?: SectionObjectModeEnum;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `mode`.
     * @type {number}
     * @memberof SectionObject
     */
    'mode_confidence'?: number;
    /**
     * An estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".
     * @type {number}
     * @memberof SectionObject
     */
    'time_signature'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the `time_signature`. Sections with time signature changes may correspond to low values in this field.
     * @type {number}
     * @memberof SectionObject
     */
    'time_signature_confidence'?: number;
}

export const SectionObjectModeEnum = {
    NUMBER_MINUS_1: -1,
    NUMBER_0: 0,
    NUMBER_1: 1
} as const;

export type SectionObjectModeEnum = typeof SectionObjectModeEnum[keyof typeof SectionObjectModeEnum];

/**
 * 
 * @export
 * @interface SegmentObject
 */
export interface SegmentObject {
    /**
     * The starting point (in seconds) of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'start'?: number;
    /**
     * The duration (in seconds) of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'duration'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the segmentation. Segments of the song which are difficult to logically segment (e.g: noise) may correspond to low values in this field. 
     * @type {number}
     * @memberof SegmentObject
     */
    'confidence'?: number;
    /**
     * The onset loudness of the segment in decibels (dB). Combined with `loudness_max` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_start'?: number;
    /**
     * The peak loudness of the segment in decibels (dB). Combined with `loudness_start` and `loudness_max_time`, these components can be used to describe the \"attack\" of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_max'?: number;
    /**
     * The segment-relative offset of the segment peak loudness in seconds. Combined with `loudness_start` and `loudness_max`, these components can be used to desctibe the \"attack\" of the segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_max_time'?: number;
    /**
     * The offset loudness of the segment in decibels (dB). This value should be equivalent to the loudness_start of the following segment.
     * @type {number}
     * @memberof SegmentObject
     */
    'loudness_end'?: number;
    /**
     * Pitch content is given by a “chroma” vector, corresponding to the 12 pitch classes C, C#, D to B, with values ranging from 0 to 1 that describe the relative dominance of every pitch in the chromatic scale. For example a C Major chord would likely be represented by large values of C, E and G (i.e. classes 0, 4, and 7).  Vectors are normalized to 1 by their strongest dimension, therefore noisy sounds are likely represented by values that are all close to 1, while pure tones are described by one value at 1 (the pitch) and others near 0. As can be seen below, the 12 vector indices are a combination of low-power spectrum values at their respective pitch frequencies. ![pitch vector](https://developer.spotify.com/assets/audio/Pitch_vector.png) 
     * @type {Array<number>}
     * @memberof SegmentObject
     */
    'pitches'?: Array<number>;
    /**
     * Timbre is the quality of a musical note or sound that distinguishes different types of musical instruments, or voices. It is a complex notion also referred to as sound color, texture, or tone quality, and is derived from the shape of a segment’s spectro-temporal surface, independently of pitch and loudness. The timbre feature is a vector that includes 12 unbounded values roughly centered around 0. Those values are high level abstractions of the spectral surface, ordered by degree of importance.  For completeness however, the first dimension represents the average loudness of the segment; second emphasizes brightness; third is more closely correlated to the flatness of a sound; fourth to sounds with a stronger attack; etc. See an image below representing the 12 basis functions (i.e. template segments). ![timbre basis functions](https://developer.spotify.com/assets/audio/Timbre_basis_functions.png)  The actual timbre of the segment is best described as a linear combination of these 12 basis functions weighted by the coefficient values: timbre = c1 x b1 + c2 x b2 + ... + c12 x b12, where c1 to c12 represent the 12 coefficients and b1 to b12 the 12 basis functions as displayed below. Timbre vectors are best used in comparison with each other. 
     * @type {Array<number>}
     * @memberof SegmentObject
     */
    'timbre'?: Array<number>;
}
/**
 * 
 * @export
 * @interface ShowBase
 */
export interface ShowBase {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ShowBase
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof ShowBase
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ShowBase
     */
    'description': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof ShowBase
     */
    'html_description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ShowBase
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ShowBase
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ShowBase
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof ShowBase
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ShowBase
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof ShowBase
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof ShowBase
     */
    'type': ShowBaseTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowBase
     */
    'uri': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof ShowBase
     */
    'total_episodes': number;
}

export const ShowBaseTypeEnum = {
    Show: 'show'
} as const;

export type ShowBaseTypeEnum = typeof ShowBaseTypeEnum[keyof typeof ShowBaseTypeEnum];

/**
 * 
 * @export
 * @interface ShowObject
 */
export interface ShowObject {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof ShowObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof ShowObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof ShowObject
     */
    'description': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof ShowObject
     */
    'html_description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof ShowObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof ShowObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof ShowObject
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof ShowObject
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof ShowObject
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof ShowObject
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof ShowObject
     */
    'type': ShowObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof ShowObject
     */
    'uri': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof ShowObject
     */
    'total_episodes': number;
    /**
     * 
     * @type {ShowObjectAllOfEpisodes}
     * @memberof ShowObject
     */
    'episodes': ShowObjectAllOfEpisodes;
}

export const ShowObjectTypeEnum = {
    Show: 'show'
} as const;

export type ShowObjectTypeEnum = typeof ShowObjectTypeEnum[keyof typeof ShowObjectTypeEnum];

/**
 * The episodes of the show. 
 * @export
 * @interface ShowObjectAllOfEpisodes
 */
export interface ShowObjectAllOfEpisodes {
    /**
     * A link to the Web API endpoint returning the full result of the request 
     * @type {string}
     * @memberof ShowObjectAllOfEpisodes
     */
    'href': string;
    /**
     * The maximum number of items in the response (as set in the query or by default). 
     * @type {number}
     * @memberof ShowObjectAllOfEpisodes
     */
    'limit': number;
    /**
     * URL to the next page of items. ( `null` if none) 
     * @type {string}
     * @memberof ShowObjectAllOfEpisodes
     */
    'next': string | null;
    /**
     * The offset of the items returned (as set in the query or by default) 
     * @type {number}
     * @memberof ShowObjectAllOfEpisodes
     */
    'offset': number;
    /**
     * URL to the previous page of items. ( `null` if none) 
     * @type {string}
     * @memberof ShowObjectAllOfEpisodes
     */
    'previous': string | null;
    /**
     * The total number of items available to return. 
     * @type {number}
     * @memberof ShowObjectAllOfEpisodes
     */
    'total': number;
    /**
     * 
     * @type {Array<SimplifiedEpisodeObject>}
     * @memberof ShowObjectAllOfEpisodes
     */
    'items': Array<SimplifiedEpisodeObject>;
}
/**
 * 
 * @export
 * @interface SimplifiedAlbumObject
 */
export interface SimplifiedAlbumObject {
    /**
     * The type of the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'album_type': SimplifiedAlbumObjectAlbumTypeEnum;
    /**
     * The number of tracks in the album.
     * @type {number}
     * @memberof SimplifiedAlbumObject
     */
    'total_tracks': number;
    /**
     * The markets in which the album is available: [ISO 3166-1 alpha-2 country codes](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2). _**NOTE**: an album is considered available in a market when at least 1 of its tracks is available in that market._ 
     * @type {Array<string>}
     * @memberof SimplifiedAlbumObject
     */
    'available_markets': Array<string>;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedAlbumObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'id': string;
    /**
     * The cover art for the album in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedAlbumObject
     */
    'images': Array<ImageObject>;
    /**
     * The name of the album. In case of an album takedown, the value may be an empty string. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'name': string;
    /**
     * The date the album was first released. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'release_date_precision': SimplifiedAlbumObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {AlbumRestrictionObject}
     * @memberof SimplifiedAlbumObject
     */
    'restrictions'?: AlbumRestrictionObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'type': SimplifiedAlbumObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the album. 
     * @type {string}
     * @memberof SimplifiedAlbumObject
     */
    'uri': string;
    /**
     * The artists of the album. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<SimplifiedArtistObject>}
     * @memberof SimplifiedAlbumObject
     */
    'artists': Array<SimplifiedArtistObject>;
}

export const SimplifiedAlbumObjectAlbumTypeEnum = {
    Album: 'album',
    Single: 'single',
    Compilation: 'compilation'
} as const;

export type SimplifiedAlbumObjectAlbumTypeEnum = typeof SimplifiedAlbumObjectAlbumTypeEnum[keyof typeof SimplifiedAlbumObjectAlbumTypeEnum];
export const SimplifiedAlbumObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SimplifiedAlbumObjectReleaseDatePrecisionEnum = typeof SimplifiedAlbumObjectReleaseDatePrecisionEnum[keyof typeof SimplifiedAlbumObjectReleaseDatePrecisionEnum];
export const SimplifiedAlbumObjectTypeEnum = {
    Album: 'album'
} as const;

export type SimplifiedAlbumObjectTypeEnum = typeof SimplifiedAlbumObjectTypeEnum[keyof typeof SimplifiedAlbumObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedArtistObject
 */
export interface SimplifiedArtistObject {
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedArtistObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'id'?: string;
    /**
     * The name of the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'name'?: string;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'type'?: SimplifiedArtistObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the artist. 
     * @type {string}
     * @memberof SimplifiedArtistObject
     */
    'uri'?: string;
}

export const SimplifiedArtistObjectTypeEnum = {
    Artist: 'artist'
} as const;

export type SimplifiedArtistObjectTypeEnum = typeof SimplifiedArtistObjectTypeEnum[keyof typeof SimplifiedArtistObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedAudiobookObject
 */
export interface SimplifiedAudiobookObject {
    /**
     * The author(s) for the audiobook. 
     * @type {Array<AuthorObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'authors': Array<AuthorObject>;
    /**
     * A list of the countries in which the audiobook can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedAudiobookObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the audiobook. 
     * @type {Array<CopyrightObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the audiobook. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'description': string;
    /**
     * A description of the audiobook. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'html_description': string;
    /**
     * The edition of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'edition'?: string;
    /**
     * Whether or not the audiobook has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedAudiobookObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedAudiobookObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'id': string;
    /**
     * The cover art for the audiobook in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'images': Array<ImageObject>;
    /**
     * A list of the languages used in the audiobook, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedAudiobookObject
     */
    'languages': Array<string>;
    /**
     * The media type of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'media_type': string;
    /**
     * The name of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'name': string;
    /**
     * The narrator(s) for the audiobook. 
     * @type {Array<NarratorObject>}
     * @memberof SimplifiedAudiobookObject
     */
    'narrators': Array<NarratorObject>;
    /**
     * The publisher of the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'type': SimplifiedAudiobookObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the audiobook. 
     * @type {string}
     * @memberof SimplifiedAudiobookObject
     */
    'uri': string;
    /**
     * The number of chapters in this audiobook. 
     * @type {number}
     * @memberof SimplifiedAudiobookObject
     */
    'total_chapters': number;
}

export const SimplifiedAudiobookObjectTypeEnum = {
    Audiobook: 'audiobook'
} as const;

export type SimplifiedAudiobookObjectTypeEnum = typeof SimplifiedAudiobookObjectTypeEnum[keyof typeof SimplifiedAudiobookObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedChapterObject
 */
export interface SimplifiedChapterObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the chapter. `null` if not available. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'audio_preview_url': string | null;
    /**
     * A list of the countries in which the chapter can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedChapterObject
     */
    'available_markets'?: Array<string>;
    /**
     * The number of the chapter 
     * @type {number}
     * @memberof SimplifiedChapterObject
     */
    'chapter_number': number;
    /**
     * A description of the chapter. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'description': string;
    /**
     * A description of the chapter. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'html_description': string;
    /**
     * The chapter length in milliseconds. 
     * @type {number}
     * @memberof SimplifiedChapterObject
     */
    'duration_ms': number;
    /**
     * Whether or not the chapter has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedChapterObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedChapterObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the chapter. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'id': string;
    /**
     * The cover art for the chapter in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedChapterObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the chapter is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof SimplifiedChapterObject
     */
    'is_playable': boolean;
    /**
     * A list of the languages used in the chapter, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedChapterObject
     */
    'languages': Array<string>;
    /**
     * The name of the chapter. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'name': string;
    /**
     * The date the chapter was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'release_date_precision': SimplifiedChapterObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ResumePointObject}
     * @memberof SimplifiedChapterObject
     */
    'resume_point': ResumePointObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'type': SimplifiedChapterObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the chapter. 
     * @type {string}
     * @memberof SimplifiedChapterObject
     */
    'uri': string;
    /**
     * 
     * @type {ChapterRestrictionObject}
     * @memberof SimplifiedChapterObject
     */
    'restrictions'?: ChapterRestrictionObject;
}

export const SimplifiedChapterObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SimplifiedChapterObjectReleaseDatePrecisionEnum = typeof SimplifiedChapterObjectReleaseDatePrecisionEnum[keyof typeof SimplifiedChapterObjectReleaseDatePrecisionEnum];
export const SimplifiedChapterObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type SimplifiedChapterObjectTypeEnum = typeof SimplifiedChapterObjectTypeEnum[keyof typeof SimplifiedChapterObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedEpisodeObject
 */
export interface SimplifiedEpisodeObject {
    /**
     * A URL to a 30 second preview (MP3 format) of the episode. `null` if not available. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'audio_preview_url': string | null;
    /**
     * A description of the episode. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'description': string;
    /**
     * A description of the episode. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'html_description': string;
    /**
     * The episode length in milliseconds. 
     * @type {number}
     * @memberof SimplifiedEpisodeObject
     */
    'duration_ms': number;
    /**
     * Whether or not the episode has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedEpisodeObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedEpisodeObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'id': string;
    /**
     * The cover art for the episode in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedEpisodeObject
     */
    'images': Array<ImageObject>;
    /**
     * True if the episode is hosted outside of Spotify\'s CDN. 
     * @type {boolean}
     * @memberof SimplifiedEpisodeObject
     */
    'is_externally_hosted': boolean;
    /**
     * True if the episode is playable in the given market. Otherwise false. 
     * @type {boolean}
     * @memberof SimplifiedEpisodeObject
     */
    'is_playable': boolean;
    /**
     * The language used in the episode, identified by a [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. This field is deprecated and might be removed in the future. Please use the `languages` field instead. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     * @deprecated
     */
    'language'?: string;
    /**
     * A list of the languages used in the episode, identified by their [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedEpisodeObject
     */
    'languages': Array<string>;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'name': string;
    /**
     * The date the episode was first released, for example `\"1981-12-15\"`. Depending on the precision, it might be shown as `\"1981\"` or `\"1981-12\"`. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'release_date': string;
    /**
     * The precision with which `release_date` value is known. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'release_date_precision': SimplifiedEpisodeObjectReleaseDatePrecisionEnum;
    /**
     * 
     * @type {ResumePointObject}
     * @memberof SimplifiedEpisodeObject
     */
    'resume_point': ResumePointObject;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'type': SimplifiedEpisodeObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the episode. 
     * @type {string}
     * @memberof SimplifiedEpisodeObject
     */
    'uri': string;
    /**
     * 
     * @type {EpisodeRestrictionObject}
     * @memberof SimplifiedEpisodeObject
     */
    'restrictions'?: EpisodeRestrictionObject;
}

export const SimplifiedEpisodeObjectReleaseDatePrecisionEnum = {
    Year: 'year',
    Month: 'month',
    Day: 'day'
} as const;

export type SimplifiedEpisodeObjectReleaseDatePrecisionEnum = typeof SimplifiedEpisodeObjectReleaseDatePrecisionEnum[keyof typeof SimplifiedEpisodeObjectReleaseDatePrecisionEnum];
export const SimplifiedEpisodeObjectTypeEnum = {
    Episode: 'episode'
} as const;

export type SimplifiedEpisodeObjectTypeEnum = typeof SimplifiedEpisodeObjectTypeEnum[keyof typeof SimplifiedEpisodeObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedPlaylistObject
 */
export interface SimplifiedPlaylistObject {
    /**
     * `true` if the owner allows other users to modify the playlist. 
     * @type {boolean}
     * @memberof SimplifiedPlaylistObject
     */
    'collaborative'?: boolean;
    /**
     * The playlist description. _Only returned for modified, verified playlists, otherwise_ `null`. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'description'?: string;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedPlaylistObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'id'?: string;
    /**
     * Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See [Working with Playlists](/documentation/web-api/concepts/playlists). _**Note**: If returned, the source URL for the image (`url`) is temporary and will expire in less than a day._ 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedPlaylistObject
     */
    'images'?: Array<ImageObject>;
    /**
     * The name of the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'name'?: string;
    /**
     * 
     * @type {PlaylistOwnerObject}
     * @memberof SimplifiedPlaylistObject
     */
    'owner'?: PlaylistOwnerObject;
    /**
     * The playlist\'s public/private status: `true` the playlist is public, `false` the playlist is private, `null` the playlist status is not relevant. For more about public/private status, see [Working with Playlists](/documentation/web-api/concepts/playlists) 
     * @type {boolean}
     * @memberof SimplifiedPlaylistObject
     */
    'public'?: boolean;
    /**
     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'snapshot_id'?: string;
    /**
     * 
     * @type {PlaylistTracksRefObject}
     * @memberof SimplifiedPlaylistObject
     */
    'tracks'?: PlaylistTracksRefObject;
    /**
     * The object type: \"playlist\" 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the playlist. 
     * @type {string}
     * @memberof SimplifiedPlaylistObject
     */
    'uri'?: string;
}
/**
 * 
 * @export
 * @interface SimplifiedShowObject
 */
export interface SimplifiedShowObject {
    /**
     * A list of the countries in which the show can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedShowObject
     */
    'available_markets': Array<string>;
    /**
     * The copyright statements of the show. 
     * @type {Array<CopyrightObject>}
     * @memberof SimplifiedShowObject
     */
    'copyrights': Array<CopyrightObject>;
    /**
     * A description of the show. HTML tags are stripped away from this field, use `html_description` field in case HTML tags are needed. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'description': string;
    /**
     * A description of the show. This field may contain HTML tags. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'html_description': string;
    /**
     * Whether or not the show has explicit content (true = yes it does; false = no it does not OR unknown). 
     * @type {boolean}
     * @memberof SimplifiedShowObject
     */
    'explicit': boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedShowObject
     */
    'external_urls': ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'href': string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'id': string;
    /**
     * The cover art for the show in various sizes, widest first. 
     * @type {Array<ImageObject>}
     * @memberof SimplifiedShowObject
     */
    'images': Array<ImageObject>;
    /**
     * True if all of the shows episodes are hosted outside of Spotify\'s CDN. This field might be `null` in some cases. 
     * @type {boolean}
     * @memberof SimplifiedShowObject
     */
    'is_externally_hosted': boolean;
    /**
     * A list of the languages used in the show, identified by their [ISO 639](https://en.wikipedia.org/wiki/ISO_639) code. 
     * @type {Array<string>}
     * @memberof SimplifiedShowObject
     */
    'languages': Array<string>;
    /**
     * The media type of the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'media_type': string;
    /**
     * The name of the episode. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'name': string;
    /**
     * The publisher of the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'publisher': string;
    /**
     * The object type. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'type': SimplifiedShowObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the show. 
     * @type {string}
     * @memberof SimplifiedShowObject
     */
    'uri': string;
    /**
     * The total number of episodes in the show. 
     * @type {number}
     * @memberof SimplifiedShowObject
     */
    'total_episodes': number;
}

export const SimplifiedShowObjectTypeEnum = {
    Show: 'show'
} as const;

export type SimplifiedShowObjectTypeEnum = typeof SimplifiedShowObjectTypeEnum[keyof typeof SimplifiedShowObjectTypeEnum];

/**
 * 
 * @export
 * @interface SimplifiedTrackObject
 */
export interface SimplifiedTrackObject {
    /**
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist.
     * @type {Array<SimplifiedArtistObject>}
     * @memberof SimplifiedTrackObject
     */
    'artists'?: Array<SimplifiedArtistObject>;
    /**
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof SimplifiedTrackObject
     */
    'available_markets'?: Array<string>;
    /**
     * The disc number (usually `1` unless the album consists of more than one disc).
     * @type {number}
     * @memberof SimplifiedTrackObject
     */
    'disc_number'?: number;
    /**
     * The track length in milliseconds.
     * @type {number}
     * @memberof SimplifiedTrackObject
     */
    'duration_ms'?: number;
    /**
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown).
     * @type {boolean}
     * @memberof SimplifiedTrackObject
     */
    'explicit'?: boolean;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof SimplifiedTrackObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'id'?: string;
    /**
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking/) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 
     * @type {boolean}
     * @memberof SimplifiedTrackObject
     */
    'is_playable'?: boolean;
    /**
     * 
     * @type {LinkedTrackObject}
     * @memberof SimplifiedTrackObject
     */
    'linked_from'?: LinkedTrackObject;
    /**
     * 
     * @type {TrackRestrictionObject}
     * @memberof SimplifiedTrackObject
     */
    'restrictions'?: TrackRestrictionObject;
    /**
     * The name of the track.
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'name'?: string;
    /**
     * A URL to a 30 second preview (MP3 format) of the track. 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'preview_url'?: string | null;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
     * @type {number}
     * @memberof SimplifiedTrackObject
     */
    'track_number'?: number;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'type'?: string;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof SimplifiedTrackObject
     */
    'uri'?: string;
    /**
     * Whether or not the track is from a local file. 
     * @type {boolean}
     * @memberof SimplifiedTrackObject
     */
    'is_local'?: boolean;
}
/**
 * 
 * @export
 * @interface StartAUsersPlaybackRequest
 */
export interface StartAUsersPlaybackRequest {
    [key: string]: any;

    /**
     * Optional. Spotify URI of the context to play. Valid contexts are albums, artists & playlists. `{context_uri:\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}` 
     * @type {{ [key: string]: any; }}
     * @memberof StartAUsersPlaybackRequest
     */
    'context_uri'?: { [key: string]: any; };
    /**
     * Optional. A JSON array of the Spotify track URIs to play. For example: `{\"uris\": [\"spotify:track:4iV5W9uYEdYUVa79Axb7Rh\", \"spotify:track:1301WleyT98MSxVHPZCA6M\"]}` 
     * @type {Array<string>}
     * @memberof StartAUsersPlaybackRequest
     */
    'uris'?: Array<string>;
    /**
     * Optional. Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object \"position\" is zero based and can’t be negative. Example: `\"offset\": {\"position\": 5}` \"uri\" is a string representing the uri of the item to start at. Example: `\"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}` 
     * @type {{ [key: string]: any; }}
     * @memberof StartAUsersPlaybackRequest
     */
    'offset'?: { [key: string]: any; };
    /**
     * integer
     * @type {{ [key: string]: any; }}
     * @memberof StartAUsersPlaybackRequest
     */
    'position_ms'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface TimeIntervalObject
 */
export interface TimeIntervalObject {
    /**
     * The starting point (in seconds) of the time interval.
     * @type {number}
     * @memberof TimeIntervalObject
     */
    'start'?: number;
    /**
     * The duration (in seconds) of the time interval.
     * @type {number}
     * @memberof TimeIntervalObject
     */
    'duration'?: number;
    /**
     * The confidence, from 0.0 to 1.0, of the reliability of the interval.
     * @type {number}
     * @memberof TimeIntervalObject
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface TrackObject
 */
export interface TrackObject {
    /**
     * 
     * @type {SimplifiedAlbumObject}
     * @memberof TrackObject
     */
    'album'?: SimplifiedAlbumObject;
    /**
     * The artists who performed the track. Each artist object includes a link in `href` to more detailed information about the artist. 
     * @type {Array<ArtistObject>}
     * @memberof TrackObject
     */
    'artists'?: Array<ArtistObject>;
    /**
     * A list of the countries in which the track can be played, identified by their [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code. 
     * @type {Array<string>}
     * @memberof TrackObject
     */
    'available_markets'?: Array<string>;
    /**
     * The disc number (usually `1` unless the album consists of more than one disc). 
     * @type {number}
     * @memberof TrackObject
     */
    'disc_number'?: number;
    /**
     * The track length in milliseconds. 
     * @type {number}
     * @memberof TrackObject
     */
    'duration_ms'?: number;
    /**
     * Whether or not the track has explicit lyrics ( `true` = yes it does; `false` = no it does not OR unknown). 
     * @type {boolean}
     * @memberof TrackObject
     */
    'explicit'?: boolean;
    /**
     * 
     * @type {ExternalIdObject}
     * @memberof TrackObject
     */
    'external_ids'?: ExternalIdObject;
    /**
     * 
     * @type {ExternalUrlObject}
     * @memberof TrackObject
     */
    'external_urls'?: ExternalUrlObject;
    /**
     * A link to the Web API endpoint providing full details of the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'href'?: string;
    /**
     * The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'id'?: string;
    /**
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied. If `true`, the track is playable in the given market. Otherwise `false`. 
     * @type {boolean}
     * @memberof TrackObject
     */
    'is_playable'?: boolean;
    /**
     * Part of the response when [Track Relinking](/documentation/web-api/concepts/track-relinking) is applied, and the requested track has been replaced with different track. The track in the `linked_from` object contains information about the originally requested track. 
     * @type {object}
     * @memberof TrackObject
     */
    'linked_from'?: object;
    /**
     * 
     * @type {TrackRestrictionObject}
     * @memberof TrackObject
     */
    'restrictions'?: TrackRestrictionObject;
    /**
     * The name of the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'name'?: string;
    /**
     * The popularity of the track. The value will be between 0 and 100, with 100 being the most popular.<br/>The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.<br/>Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past. Duplicate tracks (e.g. the same track from a single and an album) are rated independently. Artist and album popularity is derived mathematically from track popularity. _**Note**: the popularity value may lag actual popularity by a few days: the value is not updated in real time._ 
     * @type {number}
     * @memberof TrackObject
     */
    'popularity'?: number;
    /**
     * A link to a 30 second preview (MP3 format) of the track. Can be `null` 
     * @type {string}
     * @memberof TrackObject
     */
    'preview_url'?: string | null;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc. 
     * @type {number}
     * @memberof TrackObject
     */
    'track_number'?: number;
    /**
     * The object type: \"track\". 
     * @type {string}
     * @memberof TrackObject
     */
    'type'?: TrackObjectTypeEnum;
    /**
     * The [Spotify URI](/documentation/web-api/concepts/spotify-uris-ids) for the track. 
     * @type {string}
     * @memberof TrackObject
     */
    'uri'?: string;
    /**
     * Whether or not the track is from a local file. 
     * @type {boolean}
     * @memberof TrackObject
     */
    'is_local'?: boolean;
}

export const TrackObjectTypeEnum = {
    Track: 'track'
} as const;

export type TrackObjectTypeEnum = typeof TrackObjectTypeEnum[keyof typeof TrackObjectTypeEnum];

/**
 * 
 * @export
 * @interface TrackRestrictionObject
 */
export interface TrackRestrictionObject {
    /**
     * The reason for the restriction. Supported values: - `market` - The content item is not available in the given market. - `product` - The content item is not available for the user\'s subscription type. - `explicit` - The content item is explicit and the user\'s account is set to not play explicit content.  Additional reasons may be added in the future. **Note**: If you use this field, make sure that your application safely handles unknown values. 
     * @type {string}
     * @memberof TrackRestrictionObject
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface TransferAUsersPlaybackRequest
 */
export interface TransferAUsersPlaybackRequest {
    [key: string]: any;

    /**
     * A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:[\"74ASZWbe4lXaubB36ztrGX\"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_ 
     * @type {Array<string>}
     * @memberof TransferAUsersPlaybackRequest
     */
    'device_ids': Array<string>;
    /**
     * **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state. 
     * @type {{ [key: string]: any; }}
     * @memberof TransferAUsersPlaybackRequest
     */
    'play'?: { [key: string]: any; };
}
/**
 * 
 * @export
 * @interface UnfollowArtistsUsersRequest
 */
export interface UnfollowArtistsUsersRequest {
    [key: string]: any;

    /**
     * A JSON array of the artist or user [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `{ids:[\"74ASZWbe4lXaubB36ztrGX\", \"08td7MxkoHQkXnWAYD8d6Q\"]}`. A maximum of 50 IDs can be sent in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._ 
     * @type {Array<string>}
     * @memberof UnfollowArtistsUsersRequest
     */
    'ids'?: Array<string>;
}

/**
 * AlbumsApi - axios parameter creator
 * @export
 */
export const AlbumsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAlbums', 'ids', ids)
            const localVarPath = `/me/albums/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single album. 
         * @summary Get Album 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbum: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAlbum', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks: async (id: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAlbumsTracks', 'id', id)
            const localVarPath = `/albums/{id}/tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums: async (id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsAlbums', 'id', id)
            const localVarPath = `/artists/{id}/albums`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (includeGroups !== undefined) {
                localVarQueryParameter['include_groups'] = includeGroups;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
         * @summary Get Several Albums 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAlbums: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleAlbums', 'ids', ids)
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
         * @summary Get New Releases 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReleases: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/browse/new-releases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums: async (limit?: number, offset?: number, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser: async (ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAlbumsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser: async (ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAlbumsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumsApi - functional programming interface
 * @export
 */
export const AlbumsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAlbums(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAlbums(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.checkUsersSavedAlbums']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for a single album. 
         * @summary Get Album 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAlbum(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAlbum(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.getAnAlbum']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAlbumsTracks(id, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.getAnAlbumsTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingArtistDiscographyAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.getAnArtistsAlbums']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
         * @summary Get Several Albums 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleAlbums(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleAlbums200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleAlbums(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.getMultipleAlbums']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
         * @summary Get New Releases 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewReleases(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNewReleases200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewReleases(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.getNewReleases']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAlbums(limit, offset, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.getUsersSavedAlbums']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAlbumsUser(ids, saveAlbumsUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.removeAlbumsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAlbumsUser(ids, saveAlbumsUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AlbumsApi.saveAlbumsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AlbumsApi - factory interface
 * @export
 */
export const AlbumsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumsApiFp(configuration)
    return {
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAlbums(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single album. 
         * @summary Get Album 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbum(id: string, market?: string, options?: any): AxiosPromise<AlbumObject> {
            return localVarFp.getAnAlbum(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedTrackObject> {
            return localVarFp.getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingArtistDiscographyAlbumObject> {
            return localVarFp.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
         * @summary Get Several Albums 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAlbums(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleAlbums200Response> {
            return localVarFp.getMultipleAlbums(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
         * @summary Get New Releases 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewReleases(limit?: number, offset?: number, options?: any): AxiosPromise<GetNewReleases200Response> {
            return localVarFp.getNewReleases(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: any): AxiosPromise<PagingSavedAlbumObject> {
            return localVarFp.getUsersSavedAlbums(limit, offset, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlbumsApi - interface
 * @export
 * @interface AlbumsApi
 */
export interface AlbumsApiInterface {
    /**
     * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Albums 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    checkUsersSavedAlbums(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Get Spotify catalog information for a single album. 
     * @summary Get Album 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    getAnAlbum(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<AlbumObject>;

    /**
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @summary Get Album Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedTrackObject>;

    /**
     * Get Spotify catalog information about an artist\'s albums. 
     * @summary Get Artist\'s Albums 
     * @param {string} id 
     * @param {string} [includeGroups] 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingArtistDiscographyAlbumObject>;

    /**
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @summary Get Several Albums 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    getMultipleAlbums(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMultipleAlbums200Response>;

    /**
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @summary Get New Releases 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    getNewReleases(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetNewReleases200Response>;

    /**
     * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Albums 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedAlbumObject>;

    /**
     * Remove one or more albums from the current user\'s \'Your Music\' library. 
     * @summary Remove Users\' Saved Albums 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more albums to the current user\'s \'Your Music\' library. 
     * @summary Save Albums for Current User 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApiInterface
     */
    saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * AlbumsApi - object-oriented interface
 * @export
 * @class AlbumsApi
 * @extends {BaseAPI}
 */
export class AlbumsApi extends BaseAPI implements AlbumsApiInterface {
    /**
     * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Albums 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public checkUsersSavedAlbums(ids: string, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).checkUsersSavedAlbums(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single album. 
     * @summary Get Album 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getAnAlbum(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getAnAlbum(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @summary Get Album Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s albums. 
     * @summary Get Artist\'s Albums 
     * @param {string} id 
     * @param {string} [includeGroups] 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for multiple albums identified by their Spotify IDs. 
     * @summary Get Several Albums 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getMultipleAlbums(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getMultipleAlbums(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab). 
     * @summary Get New Releases 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getNewReleases(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getNewReleases(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Albums 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).getUsersSavedAlbums(limit, offset, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more albums from the current user\'s \'Your Music\' library. 
     * @summary Remove Users\' Saved Albums 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).removeAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more albums to the current user\'s \'Your Music\' library. 
     * @summary Save Albums for Current User 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumsApi
     */
    public saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig) {
        return AlbumsApiFp(this.configuration).saveAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ArtistsApi - axios parameter creator
 * @export
 */
export const ArtistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows: async (type: CheckCurrentUserFollowsTypeEnum, ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'ids', ids)
            const localVarPath = `/me/following/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers: async (type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('followArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('followArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followArtistsUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
         * @summary Get Artist 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtist: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtist', 'id', id)
            const localVarPath = `/artists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums: async (id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsAlbums', 'id', id)
            const localVarPath = `/artists/{id}/albums`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (includeGroups !== undefined) {
                localVarQueryParameter['include_groups'] = includeGroups;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s listening history. 
         * @summary Get Artist\'s Related Artists 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsRelatedArtists: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsRelatedArtists', 'id', id)
            const localVarPath = `/artists/{id}/related-artists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsTopTracks', 'id', id)
            const localVarPath = `/artists/{id}/top-tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed: async (type: GetFollowedTypeEnum, after?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFollowed', 'type', type)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several artists based on their Spotify IDs. 
         * @summary Get Several Artists 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleArtists: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleArtists', 'ids', ids)
            const localVarPath = `/artists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers: async (type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unfollowArtistsUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtistsApi - functional programming interface
 * @export
 */
export const ArtistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtistsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCurrentUserFollows(type, ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.checkCurrentUserFollows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followArtistsUsers(type, ids, followArtistsUsersRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.followArtistsUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
         * @summary Get Artist 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtist(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArtistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtist(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.getAnArtist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingArtistDiscographyAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.getAnArtistsAlbums']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s listening history. 
         * @summary Get Artist\'s Related Artists 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsRelatedArtists(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleArtists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsRelatedArtists(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.getAnArtistsRelatedArtists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsTopTracks(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAnArtistsTopTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsTopTracks(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.getAnArtistsTopTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowed(type, after, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.getFollowed']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for several artists based on their Spotify IDs. 
         * @summary Get Several Artists 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleArtists(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleArtists200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleArtists(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.getMultipleArtists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ArtistsApi.unfollowArtistsUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ArtistsApi - factory interface
 * @export
 */
export const ArtistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtistsApiFp(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkCurrentUserFollows(type, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.followArtistsUsers(type, ids, followArtistsUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
         * @summary Get Artist 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtist(id: string, options?: any): AxiosPromise<ArtistObject> {
            return localVarFp.getAnArtist(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s albums. 
         * @summary Get Artist\'s Albums 
         * @param {string} id 
         * @param {string} [includeGroups] 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingArtistDiscographyAlbumObject> {
            return localVarFp.getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s listening history. 
         * @summary Get Artist\'s Related Artists 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsRelatedArtists(id: string, options?: any): AxiosPromise<GetMultipleArtists200Response> {
            return localVarFp.getAnArtistsRelatedArtists(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks(id: string, market?: string, options?: any): AxiosPromise<GetAnArtistsTopTracks200Response> {
            return localVarFp.getAnArtistsTopTracks(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: any): AxiosPromise<GetFollowed200Response> {
            return localVarFp.getFollowed(type, after, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several artists based on their Spotify IDs. 
         * @summary Get Several Artists 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleArtists(ids: string, options?: any): AxiosPromise<GetMultipleArtists200Response> {
            return localVarFp.getMultipleArtists(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtistsApi - interface
 * @export
 * @interface ArtistsApi
 */
export interface ArtistsApiInterface {
    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {CheckCurrentUserFollowsTypeEnum} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {FollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
     * @summary Get Artist 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    getAnArtist(id: string, options?: RawAxiosRequestConfig): AxiosPromise<ArtistObject>;

    /**
     * Get Spotify catalog information about an artist\'s albums. 
     * @summary Get Artist\'s Albums 
     * @param {string} id 
     * @param {string} [includeGroups] 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingArtistDiscographyAlbumObject>;

    /**
     * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s listening history. 
     * @summary Get Artist\'s Related Artists 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    getAnArtistsRelatedArtists(id: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMultipleArtists200Response>;

    /**
     * Get Spotify catalog information about an artist\'s top tracks by country. 
     * @summary Get Artist\'s Top Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    getAnArtistsTopTracks(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAnArtistsTopTracks200Response>;

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {GetFollowedTypeEnum} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetFollowed200Response>;

    /**
     * Get Spotify catalog information for several artists based on their Spotify IDs. 
     * @summary Get Several Artists 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    getMultipleArtists(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMultipleArtists200Response>;

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {UnfollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApiInterface
     */
    unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ArtistsApi - object-oriented interface
 * @export
 * @class ArtistsApi
 * @extends {BaseAPI}
 */
export class ArtistsApi extends BaseAPI implements ArtistsApiInterface {
    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {CheckCurrentUserFollowsTypeEnum} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).checkCurrentUserFollows(type, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {FollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).followArtistsUsers(type, ids, followArtistsUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single artist identified by their unique Spotify ID. 
     * @summary Get Artist 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtist(id: string, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtist(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s albums. 
     * @summary Get Artist\'s Albums 
     * @param {string} id 
     * @param {string} [includeGroups] 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtistsAlbums(id: string, includeGroups?: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtistsAlbums(id, includeGroups, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community\'s listening history. 
     * @summary Get Artist\'s Related Artists 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtistsRelatedArtists(id: string, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtistsRelatedArtists(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s top tracks by country. 
     * @summary Get Artist\'s Top Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getAnArtistsTopTracks(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getAnArtistsTopTracks(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {GetFollowedTypeEnum} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getFollowed(type, after, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several artists based on their Spotify IDs. 
     * @summary Get Several Artists 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public getMultipleArtists(ids: string, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).getMultipleArtists(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {UnfollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistsApi
     */
    public unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig) {
        return ArtistsApiFp(this.configuration).unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CheckCurrentUserFollowsTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type CheckCurrentUserFollowsTypeEnum = typeof CheckCurrentUserFollowsTypeEnum[keyof typeof CheckCurrentUserFollowsTypeEnum];
/**
 * @export
 */
export const FollowArtistsUsersTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type FollowArtistsUsersTypeEnum = typeof FollowArtistsUsersTypeEnum[keyof typeof FollowArtistsUsersTypeEnum];
/**
 * @export
 */
export const GetFollowedTypeEnum = {
    Artist: 'artist'
} as const;
export type GetFollowedTypeEnum = typeof GetFollowedTypeEnum[keyof typeof GetFollowedTypeEnum];
/**
 * @export
 */
export const UnfollowArtistsUsersTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type UnfollowArtistsUsersTypeEnum = typeof UnfollowArtistsUsersTypeEnum[keyof typeof UnfollowArtistsUsersTypeEnum];


/**
 * AudiobooksApi - axios parameter creator
 * @export
 */
export const AudiobooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAudiobooks', 'ids', ids)
            const localVarPath = `/me/audiobooks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get an Audiobook 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAudiobook: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAudiobook', 'id', id)
            const localVarPath = `/audiobooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters: async (id: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudiobookChapters', 'id', id)
            const localVarPath = `/audiobooks/{id}/chapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Several Audiobooks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAudiobooks: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleAudiobooks', 'ids', ids)
            const localVarPath = `/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AudiobooksApi - functional programming interface
 * @export
 */
export const AudiobooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AudiobooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAudiobooks(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAudiobooks(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AudiobooksApi.checkUsersSavedAudiobooks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get an Audiobook 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAudiobook(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudiobookObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAudiobook(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AudiobooksApi.getAnAudiobook']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedChapterObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudiobookChapters(id, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AudiobooksApi.getAudiobookChapters']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Several Audiobooks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleAudiobooks(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleAudiobooks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleAudiobooks(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AudiobooksApi.getMultipleAudiobooks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAudiobooks(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedAudiobookObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAudiobooks(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AudiobooksApi.getUsersSavedAudiobooks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAudiobooksUser(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AudiobooksApi.removeAudiobooksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAudiobooksUser(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AudiobooksApi.saveAudiobooksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AudiobooksApi - factory interface
 * @export
 */
export const AudiobooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AudiobooksApiFp(configuration)
    return {
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAudiobooks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get an Audiobook 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAudiobook(id: string, market?: string, options?: any): AxiosPromise<AudiobookObject> {
            return localVarFp.getAnAudiobook(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedChapterObject> {
            return localVarFp.getAudiobookChapters(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Several Audiobooks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleAudiobooks(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleAudiobooks200Response> {
            return localVarFp.getMultipleAudiobooks(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedAudiobookObject> {
            return localVarFp.getUsersSavedAudiobooks(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.saveAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AudiobooksApi - interface
 * @export
 * @interface AudiobooksApi
 */
export interface AudiobooksApiInterface {
    /**
     * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApiInterface
     */
    checkUsersSavedAudiobooks(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get an Audiobook 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApiInterface
     */
    getAnAudiobook(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<AudiobookObject>;

    /**
     * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Audiobook Chapters 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApiInterface
     */
    getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedChapterObject>;

    /**
     * Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Several Audiobooks 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApiInterface
     */
    getMultipleAudiobooks(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMultipleAudiobooks200Response>;

    /**
     * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Audiobooks 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApiInterface
     */
    getUsersSavedAudiobooks(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedAudiobookObject>;

    /**
     * Remove one or more audiobooks from the Spotify user\'s library. 
     * @summary Remove User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApiInterface
     */
    removeAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more audiobooks to the current Spotify user\'s library. 
     * @summary Save Audiobooks for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApiInterface
     */
    saveAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * AudiobooksApi - object-oriented interface
 * @export
 * @class AudiobooksApi
 * @extends {BaseAPI}
 */
export class AudiobooksApi extends BaseAPI implements AudiobooksApiInterface {
    /**
     * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public checkUsersSavedAudiobooks(ids: string, options?: RawAxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).checkUsersSavedAudiobooks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single audiobook. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get an Audiobook 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getAnAudiobook(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getAnAudiobook(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Audiobook Chapters 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getAudiobookChapters(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several audiobooks identified by their Spotify IDs. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Several Audiobooks 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getMultipleAudiobooks(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getMultipleAudiobooks(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Audiobooks 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public getUsersSavedAudiobooks(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).getUsersSavedAudiobooks(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more audiobooks from the Spotify user\'s library. 
     * @summary Remove User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public removeAudiobooksUser(ids: string, options?: RawAxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).removeAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more audiobooks to the current Spotify user\'s library. 
     * @summary Save Audiobooks for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AudiobooksApi
     */
    public saveAudiobooksUser(ids: string, options?: RawAxiosRequestConfig) {
        return AudiobooksApiFp(this.configuration).saveAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists: async (categoryId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getACategoriesPlaylists', 'categoryId', categoryId)
            const localVarPath = `/browse/categories/{category_id}/playlists`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Single Browse Category 
         * @param {string} categoryId 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategory: async (categoryId: string, locale?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getACategory', 'categoryId', categoryId)
            const localVarPath = `/browse/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Several Browse Categories 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (locale?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/browse/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingFeaturedPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getACategoriesPlaylists(categoryId, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.getACategoriesPlaylists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Single Browse Category 
         * @param {string} categoryId 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACategory(categoryId: string, locale?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getACategory(categoryId, locale, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.getACategory']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Several Browse Categories 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(locale?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCategories200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(locale, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CategoriesApi.getCategories']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingFeaturedPlaylistObject> {
            return localVarFp.getACategoriesPlaylists(categoryId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Single Browse Category 
         * @param {string} categoryId 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategory(categoryId: string, locale?: string, options?: any): AxiosPromise<CategoryObject> {
            return localVarFp.getACategory(categoryId, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
         * @summary Get Several Browse Categories 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(locale?: string, limit?: number, offset?: number, options?: any): AxiosPromise<GetCategories200Response> {
            return localVarFp.getCategories(locale, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - interface
 * @export
 * @interface CategoriesApi
 */
export interface CategoriesApiInterface {
    /**
     * Get a list of Spotify playlists tagged with a particular category. 
     * @summary Get Category\'s Playlists 
     * @param {string} categoryId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingFeaturedPlaylistObject>;

    /**
     * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @summary Get Single Browse Category 
     * @param {string} categoryId 
     * @param {string} [locale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getACategory(categoryId: string, locale?: string, options?: RawAxiosRequestConfig): AxiosPromise<CategoryObject>;

    /**
     * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @summary Get Several Browse Categories 
     * @param {string} [locale] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    getCategories(locale?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetCategories200Response>;

}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI implements CategoriesApiInterface {
    /**
     * Get a list of Spotify playlists tagged with a particular category. 
     * @summary Get Category\'s Playlists 
     * @param {string} categoryId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getACategoriesPlaylists(categoryId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @summary Get Single Browse Category 
     * @param {string} categoryId 
     * @param {string} [locale] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getACategory(categoryId: string, locale?: string, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getACategory(categoryId, locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab). 
     * @summary Get Several Browse Categories 
     * @param {string} [locale] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategories(locale?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategories(locale, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChaptersApi - axios parameter creator
 * @export
 */
export const ChaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Spotify catalog information for a single audiobook chapter. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get a Chapter 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAChapter: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAChapter', 'id', id)
            const localVarPath = `/chapters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters: async (id: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudiobookChapters', 'id', id)
            const localVarPath = `/audiobooks/{id}/chapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Several Chapters 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralChapters: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getSeveralChapters', 'ids', ids)
            const localVarPath = `/chapters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChaptersApi - functional programming interface
 * @export
 */
export const ChaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Spotify catalog information for a single audiobook chapter. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get a Chapter 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAChapter(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChapterObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAChapter(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ChaptersApi.getAChapter']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedChapterObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudiobookChapters(id, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ChaptersApi.getAudiobookChapters']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Several Chapters 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeveralChapters(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSeveralChapters200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeveralChapters(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ChaptersApi.getSeveralChapters']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ChaptersApi - factory interface
 * @export
 */
export const ChaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChaptersApiFp(configuration)
    return {
        /**
         * Get Spotify catalog information for a single audiobook chapter. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get a Chapter 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAChapter(id: string, market?: string, options?: any): AxiosPromise<ChapterObject> {
            return localVarFp.getAChapter(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Audiobook Chapters 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedChapterObject> {
            return localVarFp.getAudiobookChapters(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Get Several Chapters 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralChapters(ids: string, market?: string, options?: any): AxiosPromise<GetSeveralChapters200Response> {
            return localVarFp.getSeveralChapters(ids, market, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChaptersApi - interface
 * @export
 * @interface ChaptersApi
 */
export interface ChaptersApiInterface {
    /**
     * Get Spotify catalog information for a single audiobook chapter. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get a Chapter 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApiInterface
     */
    getAChapter(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<ChapterObject>;

    /**
     * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Audiobook Chapters 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApiInterface
     */
    getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedChapterObject>;

    /**
     * Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Several Chapters 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApiInterface
     */
    getSeveralChapters(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetSeveralChapters200Response>;

}

/**
 * ChaptersApi - object-oriented interface
 * @export
 * @class ChaptersApi
 * @extends {BaseAPI}
 */
export class ChaptersApi extends BaseAPI implements ChaptersApiInterface {
    /**
     * Get Spotify catalog information for a single audiobook chapter. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get a Chapter 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApi
     */
    public getAChapter(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return ChaptersApiFp(this.configuration).getAChapter(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an audiobook\'s chapters. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Audiobook Chapters 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApi
     */
    public getAudiobookChapters(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ChaptersApiFp(this.configuration).getAudiobookChapters(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several audiobook chapters identified by their Spotify IDs. Chapters are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Get Several Chapters 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChaptersApi
     */
    public getSeveralChapters(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return ChaptersApiFp(this.configuration).getSeveralChapters(ids, market, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EpisodesApi - axios parameter creator
 * @export
 */
export const EpisodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedEpisodes', 'ids', ids)
            const localVarPath = `/me/episodes/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes: async (id: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAShowsEpisodes', 'id', id)
            const localVarPath = `/shows/{id}/episodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
         * @summary Get Episode 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnEpisode: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnEpisode', 'id', id)
            const localVarPath = `/episodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several episodes based on their Spotify IDs. 
         * @summary Get Several Episodes 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleEpisodes: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleEpisodes', 'ids', ids)
            const localVarPath = `/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes: async (market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read", "user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser: async (ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeEpisodesUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser: async (ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveEpisodesUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EpisodesApi - functional programming interface
 * @export
 */
export const EpisodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EpisodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedEpisodes(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedEpisodes(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EpisodesApi.checkUsersSavedEpisodes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAShowsEpisodes(id, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EpisodesApi.getAShowsEpisodes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
         * @summary Get Episode 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnEpisode(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnEpisode(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EpisodesApi.getAnEpisode']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for several episodes based on their Spotify IDs. 
         * @summary Get Several Episodes 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleEpisodes(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleEpisodes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleEpisodes(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EpisodesApi.getMultipleEpisodes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedEpisodes(market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EpisodesApi.getUsersSavedEpisodes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEpisodesUser(ids, removeEpisodesUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EpisodesApi.removeEpisodesUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveEpisodesUser(ids, saveEpisodesUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EpisodesApi.saveEpisodesUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EpisodesApi - factory interface
 * @export
 */
export const EpisodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EpisodesApiFp(configuration)
    return {
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedEpisodes(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedEpisodeObject> {
            return localVarFp.getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
         * @summary Get Episode 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnEpisode(id: string, market?: string, options?: any): AxiosPromise<EpisodeObject> {
            return localVarFp.getAnEpisode(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several episodes based on their Spotify IDs. 
         * @summary Get Several Episodes 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleEpisodes(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleEpisodes200Response> {
            return localVarFp.getMultipleEpisodes(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedEpisodeObject> {
            return localVarFp.getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeEpisodesUser(ids, removeEpisodesUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveEpisodesUser(ids, saveEpisodesUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EpisodesApi - interface
 * @export
 * @interface EpisodesApi
 */
export interface EpisodesApiInterface {
    /**
     * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @summary Check User\'s Saved Episodes 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApiInterface
     */
    checkUsersSavedEpisodes(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @summary Get Show Episodes 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApiInterface
     */
    getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedEpisodeObject>;

    /**
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
     * @summary Get Episode 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApiInterface
     */
    getAnEpisode(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<EpisodeObject>;

    /**
     * Get Spotify catalog information for several episodes based on their Spotify IDs. 
     * @summary Get Several Episodes 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApiInterface
     */
    getMultipleEpisodes(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMultipleEpisodes200Response>;

    /**
     * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Get User\'s Saved Episodes 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApiInterface
     */
    getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedEpisodeObject>;

    /**
     * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Remove User\'s Saved Episodes 
     * @param {string} ids 
     * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApiInterface
     */
    removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Save Episodes for Current User 
     * @param {string} ids 
     * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApiInterface
     */
    saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * EpisodesApi - object-oriented interface
 * @export
 * @class EpisodesApi
 * @extends {BaseAPI}
 */
export class EpisodesApi extends BaseAPI implements EpisodesApiInterface {
    /**
     * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @summary Check User\'s Saved Episodes 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public checkUsersSavedEpisodes(ids: string, options?: RawAxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).checkUsersSavedEpisodes(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @summary Get Show Episodes 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single episode identified by its unique Spotify ID. 
     * @summary Get Episode 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getAnEpisode(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getAnEpisode(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several episodes based on their Spotify IDs. 
     * @summary Get Several Episodes 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getMultipleEpisodes(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getMultipleEpisodes(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Get User\'s Saved Episodes 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Remove User\'s Saved Episodes 
     * @param {string} ids 
     * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: RawAxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).removeEpisodesUser(ids, removeEpisodesUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Save Episodes for Current User 
     * @param {string} ids 
     * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EpisodesApi
     */
    public saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: RawAxiosRequestConfig) {
        return EpisodesApiFp(this.configuration).saveEpisodesUser(ids, saveEpisodesUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GenresApi - axios parameter creator
 * @export
 */
export const GenresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
         * @summary Get Available Genre Seeds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationGenres: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recommendations/available-genre-seeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenresApi - functional programming interface
 * @export
 */
export const GenresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenresApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
         * @summary Get Available Genre Seeds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendationGenres(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRecommendationGenres200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendationGenres(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['GenresApi.getRecommendationGenres']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * GenresApi - factory interface
 * @export
 */
export const GenresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenresApiFp(configuration)
    return {
        /**
         * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
         * @summary Get Available Genre Seeds 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendationGenres(options?: any): AxiosPromise<GetRecommendationGenres200Response> {
            return localVarFp.getRecommendationGenres(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenresApi - interface
 * @export
 * @interface GenresApi
 */
export interface GenresApiInterface {
    /**
     * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
     * @summary Get Available Genre Seeds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenresApiInterface
     */
    getRecommendationGenres(options?: RawAxiosRequestConfig): AxiosPromise<GetRecommendationGenres200Response>;

}

/**
 * GenresApi - object-oriented interface
 * @export
 * @class GenresApi
 * @extends {BaseAPI}
 */
export class GenresApi extends BaseAPI implements GenresApiInterface {
    /**
     * Retrieve a list of available genres seed parameter values for [recommendations](/documentation/web-api/reference/get-recommendations). 
     * @summary Get Available Genre Seeds 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenresApi
     */
    public getRecommendationGenres(options?: RawAxiosRequestConfig) {
        return GenresApiFp(this.configuration).getRecommendationGenres(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LibraryApi - axios parameter creator
 * @export
 */
export const LibraryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails: async (playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('changePlaylistDetails', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePlaylistDetailsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows: async (type: CheckCurrentUserFollowsTypeEnum, ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'ids', ids)
            const localVarPath = `/me/following/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAlbums', 'ids', ids)
            const localVarPath = `/me/albums/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedAudiobooks', 'ids', ids)
            const localVarPath = `/me/audiobooks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedEpisodes', 'ids', ids)
            const localVarPath = `/me/episodes/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedShows', 'ids', ids)
            const localVarPath = `/me/shows/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedTracks', 'ids', ids)
            const localVarPath = `/me/tracks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {CreatePlaylistRequest} [createPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist: async (userId: string, createPlaylistRequest?: CreatePlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createPlaylist', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers: async (type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('followArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('followArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followArtistsUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed: async (type: GetFollowedTypeEnum, after?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFollowed', 'type', type)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums: async (limit?: number, offset?: number, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes: async (market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read", "user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks: async (market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtistsAndTracks: async (type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getUsersTopArtistsAndTracks', 'type', type)
            const localVarPath = `/me/top/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser: async (ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAlbumsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser: async (ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeEpisodesUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser: async (ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAlbumsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser: async (ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAlbumsUser', 'ids', ids)
            const localVarPath = `/me/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAlbumsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveAudiobooksUser', 'ids', ids)
            const localVarPath = `/me/audiobooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser: async (ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveEpisodesUser', 'ids', ids)
            const localVarPath = `/me/episodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveEpisodesUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser: async (ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveTracksUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers: async (type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unfollowArtistsUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LibraryApi - functional programming interface
 * @export
 */
export const LibraryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LibraryApiAxiosParamCreator(configuration)
    return {
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePlaylistDetails(playlistId, changePlaylistDetailsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.changePlaylistDetails']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCurrentUserFollows(type, ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.checkCurrentUserFollows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAlbums(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAlbums(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.checkUsersSavedAlbums']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedAudiobooks(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedAudiobooks(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.checkUsersSavedAudiobooks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedEpisodes(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedEpisodes(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.checkUsersSavedEpisodes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedShows(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedShows(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.checkUsersSavedShows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedTracks(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedTracks(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.checkUsersSavedTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {CreatePlaylistRequest} [createPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlaylist(userId, createPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.createPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followArtistsUsers(type, ids, followArtistsUsersRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.followArtistsUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAListOfCurrentUsersPlaylists(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getAListOfCurrentUsersPlaylists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowed(type, after, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getFollowed']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedAlbumObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAlbums(limit, offset, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getUsersSavedAlbums']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedAudiobooks(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedAudiobookObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedAudiobooks(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getUsersSavedAudiobooks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedEpisodes(market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getUsersSavedEpisodes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedShows(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedShowObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedShows(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getUsersSavedShows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedTracks(market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getUsersSavedTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersTopArtistsAndTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.getUsersTopArtistsAndTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAlbumsUser(ids, saveAlbumsUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.removeAlbumsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAudiobooksUser(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.removeAudiobooksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeEpisodesUser(ids, removeEpisodesUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.removeEpisodesUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeShowsUser(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeShowsUser(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.removeShowsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksUser(ids, saveAlbumsUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.removeTracksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAlbumsUser(ids, saveAlbumsUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.saveAlbumsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveAudiobooksUser(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.saveAudiobooksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveEpisodesUser(ids, saveEpisodesUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.saveEpisodesUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveShowsUser(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveShowsUser(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.saveShowsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveTracksUser(ids, saveTracksUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.saveTracksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['LibraryApi.unfollowArtistsUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * LibraryApi - factory interface
 * @export
 */
export const LibraryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LibraryApiFp(configuration)
    return {
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.changePlaylistDetails(playlistId, changePlaylistDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkCurrentUserFollows(type, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Albums 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAlbums(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAlbums(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedAudiobooks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedAudiobooks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
         * @summary Check User\'s Saved Episodes 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedEpisodes(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedEpisodes(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedShows(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedTracks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {CreatePlaylistRequest} [createPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: any): AxiosPromise<PlaylistObject> {
            return localVarFp.createPlaylist(userId, createPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.followArtistsUsers(type, ids, followArtistsUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: any): AxiosPromise<GetFollowed200Response> {
            return localVarFp.getFollowed(type, after, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Albums 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: any): AxiosPromise<PagingSavedAlbumObject> {
            return localVarFp.getUsersSavedAlbums(limit, offset, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Audiobooks 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedAudiobooks(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedAudiobookObject> {
            return localVarFp.getUsersSavedAudiobooks(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Get User\'s Saved Episodes 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedEpisodeObject> {
            return localVarFp.getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedShowObject> {
            return localVarFp.getUsersSavedShows(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedTrackObject> {
            return localVarFp.getUsersSavedTracks(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<GetUsersTopArtistsAndTracks200Response> {
            return localVarFp.getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more albums from the current user\'s \'Your Music\' library. 
         * @summary Remove Users\' Saved Albums 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more audiobooks from the Spotify user\'s library. 
         * @summary Remove User\'s Saved Audiobooks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Remove User\'s Saved Episodes 
         * @param {string} ids 
         * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeEpisodesUser(ids, removeEpisodesUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser(ids: string, market?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeShowsUser(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeTracksUser(ids, saveAlbumsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more albums to the current user\'s \'Your Music\' library. 
         * @summary Save Albums for Current User 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more audiobooks to the current Spotify user\'s library. 
         * @summary Save Audiobooks for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveAudiobooksUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.saveAudiobooksUser(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
         * @summary Save Episodes for Current User 
         * @param {string} ids 
         * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveEpisodesUser(ids, saveEpisodesUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.saveShowsUser(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveTracksUser(ids, saveTracksUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LibraryApi - interface
 * @export
 * @interface LibraryApi
 */
export interface LibraryApiInterface {
    /**
     * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
     * @summary Change Playlist Details 
     * @param {string} playlistId 
     * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {CheckCurrentUserFollowsTypeEnum} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Albums 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    checkUsersSavedAlbums(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    checkUsersSavedAudiobooks(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @summary Check User\'s Saved Episodes 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    checkUsersSavedEpisodes(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Check if one or more shows is already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Shows 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    checkUsersSavedShows(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Tracks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    checkUsersSavedTracks(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @summary Create Playlist 
     * @param {string} userId 
     * @param {CreatePlaylistRequest} [createPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistObject>;

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {FollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @summary Get Current User\'s Playlists 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingPlaylistObject>;

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {GetFollowedTypeEnum} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetFollowed200Response>;

    /**
     * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Albums 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedAlbumObject>;

    /**
     * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Audiobooks 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getUsersSavedAudiobooks(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedAudiobookObject>;

    /**
     * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Get User\'s Saved Episodes 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedEpisodeObject>;

    /**
     * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
     * @summary Get User\'s Saved Shows 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getUsersSavedShows(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedShowObject>;

    /**
     * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Tracks 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedTrackObject>;

    /**
     * Get the current user\'s top artists or tracks based on calculated affinity. 
     * @summary Get User\'s Top Items 
     * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetUsersTopArtistsAndTracks200Response>;

    /**
     * Remove one or more albums from the current user\'s \'Your Music\' library. 
     * @summary Remove Users\' Saved Albums 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Remove one or more audiobooks from the Spotify user\'s library. 
     * @summary Remove User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    removeAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Remove User\'s Saved Episodes 
     * @param {string} ids 
     * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Delete one or more shows from current Spotify user\'s library. 
     * @summary Remove User\'s Saved Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    removeShowsUser(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Remove one or more tracks from the current user\'s \'Your Music\' library. 
     * @summary Remove User\'s Saved Tracks 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more albums to the current user\'s \'Your Music\' library. 
     * @summary Save Albums for Current User 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more audiobooks to the current Spotify user\'s library. 
     * @summary Save Audiobooks for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    saveAudiobooksUser(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Save Episodes for Current User 
     * @param {string} ids 
     * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more shows to current Spotify user\'s library. 
     * @summary Save Shows for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    saveShowsUser(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more tracks to the current user\'s \'Your Music\' library. 
     * @summary Save Tracks for Current User 
     * @param {string} ids 
     * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {UnfollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApiInterface
     */
    unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * LibraryApi - object-oriented interface
 * @export
 * @class LibraryApi
 * @extends {BaseAPI}
 */
export class LibraryApi extends BaseAPI implements LibraryApiInterface {
    /**
     * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
     * @summary Change Playlist Details 
     * @param {string} playlistId 
     * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).changePlaylistDetails(playlistId, changePlaylistDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {CheckCurrentUserFollowsTypeEnum} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkCurrentUserFollows(type, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more albums is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Albums 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedAlbums(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedAlbums(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more audiobooks are already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedAudiobooks(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedAudiobooks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more episodes is already saved in the current Spotify user\'s \'Your Episodes\' library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer).. 
     * @summary Check User\'s Saved Episodes 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedEpisodes(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedEpisodes(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more shows is already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Shows 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedShows(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedShows(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Tracks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public checkUsersSavedTracks(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).checkUsersSavedTracks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @summary Create Playlist 
     * @param {string} userId 
     * @param {CreatePlaylistRequest} [createPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).createPlaylist(userId, createPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {FollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).followArtistsUsers(type, ids, followArtistsUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @summary Get Current User\'s Playlists 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {GetFollowedTypeEnum} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getFollowed(type, after, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the albums saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Albums 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedAlbums(limit?: number, offset?: number, market?: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedAlbums(limit, offset, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the audiobooks saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Audiobooks 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedAudiobooks(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedAudiobooks(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the episodes saved in the current Spotify user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Get User\'s Saved Episodes 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedEpisodes(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedEpisodes(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
     * @summary Get User\'s Saved Shows 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedShows(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedShows(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Tracks 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersSavedTracks(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top artists or tracks based on calculated affinity. 
     * @summary Get User\'s Top Items 
     * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more albums from the current user\'s \'Your Music\' library. 
     * @summary Remove Users\' Saved Albums 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more audiobooks from the Spotify user\'s library. 
     * @summary Remove User\'s Saved Audiobooks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeAudiobooksUser(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more episodes from the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Remove User\'s Saved Episodes 
     * @param {string} ids 
     * @param {RemoveEpisodesUserRequest} [removeEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeEpisodesUser(ids: string, removeEpisodesUserRequest?: RemoveEpisodesUserRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeEpisodesUser(ids, removeEpisodesUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete one or more shows from current Spotify user\'s library. 
     * @summary Remove User\'s Saved Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeShowsUser(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeShowsUser(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more tracks from the current user\'s \'Your Music\' library. 
     * @summary Remove User\'s Saved Tracks 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).removeTracksUser(ids, saveAlbumsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more albums to the current user\'s \'Your Music\' library. 
     * @summary Save Albums for Current User 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveAlbumsUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveAlbumsUser(ids, saveAlbumsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more audiobooks to the current Spotify user\'s library. 
     * @summary Save Audiobooks for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveAudiobooksUser(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveAudiobooksUser(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more episodes to the current user\'s library.<br/> This API endpoint is in __beta__ and could change without warning. Please share any feedback that you have, or issues that you discover, in our [developer community forum](https://community.spotify.com/t5/Spotify-for-Developers/bd-p/Spotify_Developer). 
     * @summary Save Episodes for Current User 
     * @param {string} ids 
     * @param {SaveEpisodesUserRequest} [saveEpisodesUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveEpisodesUser(ids: string, saveEpisodesUserRequest?: SaveEpisodesUserRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveEpisodesUser(ids, saveEpisodesUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more shows to current Spotify user\'s library. 
     * @summary Save Shows for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveShowsUser(ids: string, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveShowsUser(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more tracks to the current user\'s \'Your Music\' library. 
     * @summary Save Tracks for Current User 
     * @param {string} ids 
     * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).saveTracksUser(ids, saveTracksUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {UnfollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LibraryApi
     */
    public unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig) {
        return LibraryApiFp(this.configuration).unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CheckCurrentUserFollowsTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type CheckCurrentUserFollowsTypeEnum = typeof CheckCurrentUserFollowsTypeEnum[keyof typeof CheckCurrentUserFollowsTypeEnum];
/**
 * @export
 */
export const FollowArtistsUsersTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type FollowArtistsUsersTypeEnum = typeof FollowArtistsUsersTypeEnum[keyof typeof FollowArtistsUsersTypeEnum];
/**
 * @export
 */
export const GetFollowedTypeEnum = {
    Artist: 'artist'
} as const;
export type GetFollowedTypeEnum = typeof GetFollowedTypeEnum[keyof typeof GetFollowedTypeEnum];
/**
 * @export
 */
export const GetUsersTopArtistsAndTracksTypeEnum = {
    Artists: 'artists',
    Tracks: 'tracks'
} as const;
export type GetUsersTopArtistsAndTracksTypeEnum = typeof GetUsersTopArtistsAndTracksTypeEnum[keyof typeof GetUsersTopArtistsAndTracksTypeEnum];
/**
 * @export
 */
export const UnfollowArtistsUsersTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type UnfollowArtistsUsersTypeEnum = typeof UnfollowArtistsUsersTypeEnum[keyof typeof UnfollowArtistsUsersTypeEnum];


/**
 * MarketsApi - axios parameter creator
 * @export
 */
export const MarketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of markets where Spotify is available. 
         * @summary Get Available Markets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableMarkets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/markets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketsApi - functional programming interface
 * @export
 */
export const MarketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of markets where Spotify is available. 
         * @summary Get Available Markets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableMarkets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAvailableMarkets200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableMarkets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MarketsApi.getAvailableMarkets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MarketsApi - factory interface
 * @export
 */
export const MarketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketsApiFp(configuration)
    return {
        /**
         * Get the list of markets where Spotify is available. 
         * @summary Get Available Markets 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableMarkets(options?: any): AxiosPromise<GetAvailableMarkets200Response> {
            return localVarFp.getAvailableMarkets(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketsApi - interface
 * @export
 * @interface MarketsApi
 */
export interface MarketsApiInterface {
    /**
     * Get the list of markets where Spotify is available. 
     * @summary Get Available Markets 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketsApiInterface
     */
    getAvailableMarkets(options?: RawAxiosRequestConfig): AxiosPromise<GetAvailableMarkets200Response>;

}

/**
 * MarketsApi - object-oriented interface
 * @export
 * @class MarketsApi
 * @extends {BaseAPI}
 */
export class MarketsApi extends BaseAPI implements MarketsApiInterface {
    /**
     * Get the list of markets where Spotify is available. 
     * @summary Get Available Markets 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketsApi
     */
    public getAvailableMarkets(options?: RawAxiosRequestConfig) {
        return MarketsApiFp(this.configuration).getAvailableMarkets(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlayerApi - axios parameter creator
 * @export
 */
export const PlayerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an item to the end of the user\'s current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Add Item to Playback Queue 
         * @param {string} uri 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToQueue: async (uri: string, deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uri' is not null or undefined
            assertParamExists('addToQueue', 'uri', uri)
            const localVarPath = `/me/player/queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response. 
         * @summary Get Available Devices 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAUsersAvailableDevices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-state"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the user’s current playback state, including track or episode, progress, and active device. 
         * @summary Get Playback State 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformationAboutTheUsersCurrentPlayback: async (market?: string, additionalTypes?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-state"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of objects that make up the user\'s queue. 
         * @summary Get the User\'s Queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueue: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/queue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-currently-playing", "user-read-playback-state"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
         * @summary Get Recently Played Tracks 
         * @param {number} [limit] 
         * @param {number} [after] 
         * @param {number} [before] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentlyPlayed: async (limit?: number, after?: number, before?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/recently-played`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-recently-played"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the object currently being played on the user\'s Spotify account. 
         * @summary Get Currently Playing Track 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTheUsersCurrentlyPlayingTrack: async (market?: string, additionalTypes?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/currently-playing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-currently-playing"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pause playback on the user\'s account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Pause Playback 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAUsersPlayback: async (deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Seek To Position 
         * @param {number} positionMs 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seekToPositionInCurrentlyPlayingTrack: async (positionMs: number, deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionMs' is not null or undefined
            assertParamExists('seekToPositionInCurrentlyPlayingTrack', 'positionMs', positionMs)
            const localVarPath = `/me/player/seek`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (positionMs !== undefined) {
                localVarQueryParameter['position_ms'] = positionMs;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the repeat mode for the user\'s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Set Repeat Mode 
         * @param {string} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRepeatModeOnUsersPlayback: async (state: string, deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('setRepeatModeOnUsersPlayback', 'state', state)
            const localVarPath = `/me/player/repeat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Set Playback Volume 
         * @param {number} volumePercent 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVolumeForUsersPlayback: async (volumePercent: number, deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'volumePercent' is not null or undefined
            assertParamExists('setVolumeForUsersPlayback', 'volumePercent', volumePercent)
            const localVarPath = `/me/player/volume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (volumePercent !== undefined) {
                localVarQueryParameter['volume_percent'] = volumePercent;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Skip To Next 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToNextTrack: async (deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/next`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Skip To Previous 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToPreviousTrack: async (deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/previous`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a new context or resume current playback on the user\'s active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Start/Resume Playback 
         * @param {string} [deviceId] 
         * @param {StartAUsersPlaybackRequest} [startAUsersPlaybackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAUsersPlayback: async (deviceId?: string, startAUsersPlaybackRequest?: StartAUsersPlaybackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player/play`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(startAUsersPlaybackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Toggle Playback Shuffle 
         * @param {boolean} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleShuffleForUsersPlayback: async (state: boolean, deviceId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            assertParamExists('toggleShuffleForUsersPlayback', 'state', state)
            const localVarPath = `/me/player/shuffle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (deviceId !== undefined) {
                localVarQueryParameter['device_id'] = deviceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Transfer Playback 
         * @param {TransferAUsersPlaybackRequest} [transferAUsersPlaybackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAUsersPlayback: async (transferAUsersPlaybackRequest?: TransferAUsersPlaybackRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/player`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-modify-playback-state"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transferAUsersPlaybackRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayerApi - functional programming interface
 * @export
 */
export const PlayerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayerApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an item to the end of the user\'s current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Add Item to Playback Queue 
         * @param {string} uri 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToQueue(uri: string, deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToQueue(uri, deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.addToQueue']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response. 
         * @summary Get Available Devices 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAUsersAvailableDevices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAUsersAvailableDevices200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAUsersAvailableDevices(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.getAUsersAvailableDevices']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get information about the user’s current playback state, including track or episode, progress, and active device. 
         * @summary Get Playback State 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInformationAboutTheUsersCurrentPlayback(market?: string, additionalTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentlyPlayingContextObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInformationAboutTheUsersCurrentPlayback(market, additionalTypes, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.getInformationAboutTheUsersCurrentPlayback']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the list of objects that make up the user\'s queue. 
         * @summary Get the User\'s Queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueue(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueueObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueue(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.getQueue']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
         * @summary Get Recently Played Tracks 
         * @param {number} [limit] 
         * @param {number} [after] 
         * @param {number} [before] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentlyPlayed(limit?: number, after?: number, before?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CursorPagingPlayHistoryObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentlyPlayed(limit, after, before, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.getRecentlyPlayed']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the object currently being played on the user\'s Spotify account. 
         * @summary Get Currently Playing Track 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTheUsersCurrentlyPlayingTrack(market?: string, additionalTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentlyPlayingContextObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTheUsersCurrentlyPlayingTrack(market, additionalTypes, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.getTheUsersCurrentlyPlayingTrack']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Pause playback on the user\'s account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Pause Playback 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseAUsersPlayback(deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseAUsersPlayback(deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.pauseAUsersPlayback']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Seek To Position 
         * @param {number} positionMs 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async seekToPositionInCurrentlyPlayingTrack(positionMs: number, deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.seekToPositionInCurrentlyPlayingTrack(positionMs, deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.seekToPositionInCurrentlyPlayingTrack']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Set the repeat mode for the user\'s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Set Repeat Mode 
         * @param {string} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRepeatModeOnUsersPlayback(state: string, deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRepeatModeOnUsersPlayback(state, deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.setRepeatModeOnUsersPlayback']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Set Playback Volume 
         * @param {number} volumePercent 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setVolumeForUsersPlayback(volumePercent: number, deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setVolumeForUsersPlayback(volumePercent, deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.setVolumeForUsersPlayback']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Skip To Next 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skipUsersPlaybackToNextTrack(deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skipUsersPlaybackToNextTrack(deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.skipUsersPlaybackToNextTrack']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Skip To Previous 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async skipUsersPlaybackToPreviousTrack(deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.skipUsersPlaybackToPreviousTrack(deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.skipUsersPlaybackToPreviousTrack']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Start a new context or resume current playback on the user\'s active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Start/Resume Playback 
         * @param {string} [deviceId] 
         * @param {StartAUsersPlaybackRequest} [startAUsersPlaybackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startAUsersPlayback(deviceId?: string, startAUsersPlaybackRequest?: StartAUsersPlaybackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startAUsersPlayback(deviceId, startAUsersPlaybackRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.startAUsersPlayback']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Toggle Playback Shuffle 
         * @param {boolean} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async toggleShuffleForUsersPlayback(state: boolean, deviceId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.toggleShuffleForUsersPlayback(state, deviceId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.toggleShuffleForUsersPlayback']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Transfer Playback 
         * @param {TransferAUsersPlaybackRequest} [transferAUsersPlaybackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transferAUsersPlayback(transferAUsersPlaybackRequest?: TransferAUsersPlaybackRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transferAUsersPlayback(transferAUsersPlaybackRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlayerApi.transferAUsersPlayback']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PlayerApi - factory interface
 * @export
 */
export const PlayerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayerApiFp(configuration)
    return {
        /**
         * Add an item to the end of the user\'s current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Add Item to Playback Queue 
         * @param {string} uri 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToQueue(uri: string, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.addToQueue(uri, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response. 
         * @summary Get Available Devices 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAUsersAvailableDevices(options?: any): AxiosPromise<GetAUsersAvailableDevices200Response> {
            return localVarFp.getAUsersAvailableDevices(options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about the user’s current playback state, including track or episode, progress, and active device. 
         * @summary Get Playback State 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInformationAboutTheUsersCurrentPlayback(market?: string, additionalTypes?: string, options?: any): AxiosPromise<CurrentlyPlayingContextObject> {
            return localVarFp.getInformationAboutTheUsersCurrentPlayback(market, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of objects that make up the user\'s queue. 
         * @summary Get the User\'s Queue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueue(options?: any): AxiosPromise<QueueObject> {
            return localVarFp.getQueue(options).then((request) => request(axios, basePath));
        },
        /**
         * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
         * @summary Get Recently Played Tracks 
         * @param {number} [limit] 
         * @param {number} [after] 
         * @param {number} [before] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentlyPlayed(limit?: number, after?: number, before?: number, options?: any): AxiosPromise<CursorPagingPlayHistoryObject> {
            return localVarFp.getRecentlyPlayed(limit, after, before, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the object currently being played on the user\'s Spotify account. 
         * @summary Get Currently Playing Track 
         * @param {string} [market] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTheUsersCurrentlyPlayingTrack(market?: string, additionalTypes?: string, options?: any): AxiosPromise<CurrentlyPlayingContextObject> {
            return localVarFp.getTheUsersCurrentlyPlayingTrack(market, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Pause playback on the user\'s account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Pause Playback 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseAUsersPlayback(deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.pauseAUsersPlayback(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Seek To Position 
         * @param {number} positionMs 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seekToPositionInCurrentlyPlayingTrack(positionMs: number, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.seekToPositionInCurrentlyPlayingTrack(positionMs, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the repeat mode for the user\'s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Set Repeat Mode 
         * @param {string} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRepeatModeOnUsersPlayback(state: string, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.setRepeatModeOnUsersPlayback(state, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Set Playback Volume 
         * @param {number} volumePercent 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setVolumeForUsersPlayback(volumePercent: number, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.setVolumeForUsersPlayback(volumePercent, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Skip To Next 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToNextTrack(deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.skipUsersPlaybackToNextTrack(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Skip To Previous 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        skipUsersPlaybackToPreviousTrack(deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.skipUsersPlaybackToPreviousTrack(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Start a new context or resume current playback on the user\'s active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Start/Resume Playback 
         * @param {string} [deviceId] 
         * @param {StartAUsersPlaybackRequest} [startAUsersPlaybackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startAUsersPlayback(deviceId?: string, startAUsersPlaybackRequest?: StartAUsersPlaybackRequest, options?: any): AxiosPromise<void> {
            return localVarFp.startAUsersPlayback(deviceId, startAUsersPlaybackRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Toggle Playback Shuffle 
         * @param {boolean} state 
         * @param {string} [deviceId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        toggleShuffleForUsersPlayback(state: boolean, deviceId?: string, options?: any): AxiosPromise<void> {
            return localVarFp.toggleShuffleForUsersPlayback(state, deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
         * @summary Transfer Playback 
         * @param {TransferAUsersPlaybackRequest} [transferAUsersPlaybackRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transferAUsersPlayback(transferAUsersPlaybackRequest?: TransferAUsersPlaybackRequest, options?: any): AxiosPromise<void> {
            return localVarFp.transferAUsersPlayback(transferAUsersPlaybackRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlayerApi - interface
 * @export
 * @interface PlayerApi
 */
export interface PlayerApiInterface {
    /**
     * Add an item to the end of the user\'s current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Add Item to Playback Queue 
     * @param {string} uri 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    addToQueue(uri: string, deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response. 
     * @summary Get Available Devices 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    getAUsersAvailableDevices(options?: RawAxiosRequestConfig): AxiosPromise<GetAUsersAvailableDevices200Response>;

    /**
     * Get information about the user’s current playback state, including track or episode, progress, and active device. 
     * @summary Get Playback State 
     * @param {string} [market] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    getInformationAboutTheUsersCurrentPlayback(market?: string, additionalTypes?: string, options?: RawAxiosRequestConfig): AxiosPromise<CurrentlyPlayingContextObject>;

    /**
     * Get the list of objects that make up the user\'s queue. 
     * @summary Get the User\'s Queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    getQueue(options?: RawAxiosRequestConfig): AxiosPromise<QueueObject>;

    /**
     * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
     * @summary Get Recently Played Tracks 
     * @param {number} [limit] 
     * @param {number} [after] 
     * @param {number} [before] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    getRecentlyPlayed(limit?: number, after?: number, before?: number, options?: RawAxiosRequestConfig): AxiosPromise<CursorPagingPlayHistoryObject>;

    /**
     * Get the object currently being played on the user\'s Spotify account. 
     * @summary Get Currently Playing Track 
     * @param {string} [market] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    getTheUsersCurrentlyPlayingTrack(market?: string, additionalTypes?: string, options?: RawAxiosRequestConfig): AxiosPromise<CurrentlyPlayingContextObject>;

    /**
     * Pause playback on the user\'s account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Pause Playback 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    pauseAUsersPlayback(deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Seek To Position 
     * @param {number} positionMs 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    seekToPositionInCurrentlyPlayingTrack(positionMs: number, deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Set the repeat mode for the user\'s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Set Repeat Mode 
     * @param {string} state 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    setRepeatModeOnUsersPlayback(state: string, deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Set Playback Volume 
     * @param {number} volumePercent 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    setVolumeForUsersPlayback(volumePercent: number, deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Skip To Next 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    skipUsersPlaybackToNextTrack(deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Skip To Previous 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    skipUsersPlaybackToPreviousTrack(deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Start a new context or resume current playback on the user\'s active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Start/Resume Playback 
     * @param {string} [deviceId] 
     * @param {StartAUsersPlaybackRequest} [startAUsersPlaybackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    startAUsersPlayback(deviceId?: string, startAUsersPlaybackRequest?: StartAUsersPlaybackRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Toggle Playback Shuffle 
     * @param {boolean} state 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    toggleShuffleForUsersPlayback(state: boolean, deviceId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Transfer Playback 
     * @param {TransferAUsersPlaybackRequest} [transferAUsersPlaybackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApiInterface
     */
    transferAUsersPlayback(transferAUsersPlaybackRequest?: TransferAUsersPlaybackRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PlayerApi - object-oriented interface
 * @export
 * @class PlayerApi
 * @extends {BaseAPI}
 */
export class PlayerApi extends BaseAPI implements PlayerApiInterface {
    /**
     * Add an item to the end of the user\'s current playback queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Add Item to Playback Queue 
     * @param {string} uri 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public addToQueue(uri: string, deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).addToQueue(uri, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a user’s available Spotify Connect devices. Some device models are not supported and will not be listed in the API response. 
     * @summary Get Available Devices 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getAUsersAvailableDevices(options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getAUsersAvailableDevices(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about the user’s current playback state, including track or episode, progress, and active device. 
     * @summary Get Playback State 
     * @param {string} [market] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getInformationAboutTheUsersCurrentPlayback(market?: string, additionalTypes?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getInformationAboutTheUsersCurrentPlayback(market, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of objects that make up the user\'s queue. 
     * @summary Get the User\'s Queue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getQueue(options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getQueue(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tracks from the current user\'s recently played tracks. _**Note**: Currently doesn\'t support podcast episodes._ 
     * @summary Get Recently Played Tracks 
     * @param {number} [limit] 
     * @param {number} [after] 
     * @param {number} [before] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getRecentlyPlayed(limit?: number, after?: number, before?: number, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getRecentlyPlayed(limit, after, before, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the object currently being played on the user\'s Spotify account. 
     * @summary Get Currently Playing Track 
     * @param {string} [market] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public getTheUsersCurrentlyPlayingTrack(market?: string, additionalTypes?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).getTheUsersCurrentlyPlayingTrack(market, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pause playback on the user\'s account. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Pause Playback 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public pauseAUsersPlayback(deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).pauseAUsersPlayback(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Seeks to the given position in the user’s currently playing track. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Seek To Position 
     * @param {number} positionMs 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public seekToPositionInCurrentlyPlayingTrack(positionMs: number, deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).seekToPositionInCurrentlyPlayingTrack(positionMs, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the repeat mode for the user\'s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Set Repeat Mode 
     * @param {string} state 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public setRepeatModeOnUsersPlayback(state: string, deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).setRepeatModeOnUsersPlayback(state, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the volume for the user’s current playback device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Set Playback Volume 
     * @param {number} volumePercent 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public setVolumeForUsersPlayback(volumePercent: number, deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).setVolumeForUsersPlayback(volumePercent, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Skips to next track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Skip To Next 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public skipUsersPlaybackToNextTrack(deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).skipUsersPlaybackToNextTrack(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Skips to previous track in the user’s queue. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Skip To Previous 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public skipUsersPlaybackToPreviousTrack(deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).skipUsersPlaybackToPreviousTrack(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a new context or resume current playback on the user\'s active device. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Start/Resume Playback 
     * @param {string} [deviceId] 
     * @param {StartAUsersPlaybackRequest} [startAUsersPlaybackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public startAUsersPlayback(deviceId?: string, startAUsersPlaybackRequest?: StartAUsersPlaybackRequest, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).startAUsersPlayback(deviceId, startAUsersPlaybackRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggle shuffle on or off for user’s playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Toggle Playback Shuffle 
     * @param {boolean} state 
     * @param {string} [deviceId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public toggleShuffleForUsersPlayback(state: boolean, deviceId?: string, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).toggleShuffleForUsersPlayback(state, deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Transfer playback to a new device and optionally begin playback. This API only works for users who have Spotify Premium. The order of execution is not guaranteed when you use this API with other Player API endpoints. 
     * @summary Transfer Playback 
     * @param {TransferAUsersPlaybackRequest} [transferAUsersPlaybackRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayerApi
     */
    public transferAUsersPlayback(transferAUsersPlaybackRequest?: TransferAUsersPlaybackRequest, options?: RawAxiosRequestConfig) {
        return PlayerApiFp(this.configuration).transferAUsersPlayback(transferAUsersPlaybackRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlaylistsApi - axios parameter creator
 * @export
 */
export const PlaylistsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist: async (playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('addTracksToPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (position !== undefined) {
                localVarQueryParameter['position'] = position;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTracksToPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails: async (playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('changePlaylistDetails', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePlaylistDetailsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist: async (playlistId: string, ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'playlistId', playlistId)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'ids', ids)
            const localVarPath = `/playlists/{playlist_id}/followers/contains`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {CreatePlaylistRequest} [createPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist: async (userId: string, createPlaylistRequest?: CreatePlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createPlaylist', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {FollowPlaylistRequest} [followPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist: async (playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('followPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists: async (categoryId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getACategoriesPlaylists', 'categoryId', categoryId)
            const localVarPath = `/browse/categories/{category_id}/playlists`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
         * @summary Get Featured Playlists 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedPlaylists: async (locale?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/browse/featured-playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists: async (userId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getListUsersPlaylists', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private", "playlist-read-collaborative"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a playlist owned by a Spotify user. 
         * @summary Get Playlist 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylist: async (playlistId: string, market?: string, fields?: string, additionalTypes?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current image associated with a specific playlist. 
         * @summary Get Playlist Cover Image 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistCover: async (playlistId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylistCover', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/images`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks: async (playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist: async (playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('removeTracksPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeTracksPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks: async (playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('reorderOrReplacePlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reorderOrReplacePlaylistsTracksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist: async (playlistId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('unfollowPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace the image used to represent a specific playlist. 
         * @summary Add Custom Playlist Cover Image 
         * @param {string} playlistId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCustomPlaylistCover: async (playlistId: string, body: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('uploadCustomPlaylistCover', 'playlistId', playlistId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('uploadCustomPlaylistCover', 'body', body)
            const localVarPath = `/playlists/{playlist_id}/images`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["ugc-image-upload", "playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'image/jpeg';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaylistsApi - functional programming interface
 * @export
 */
export const PlaylistsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaylistsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTracksToPlaylist(playlistId, position, uris, addTracksToPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.addTracksToPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePlaylistDetails(playlistId, changePlaylistDetailsRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.changePlaylistDetails']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIfUserFollowsPlaylist(playlistId, ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.checkIfUserFollowsPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {CreatePlaylistRequest} [createPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlaylist(userId, createPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.createPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {FollowPlaylistRequest} [followPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPlaylist(playlistId, followPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.followPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingFeaturedPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getACategoriesPlaylists(categoryId, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.getACategoriesPlaylists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAListOfCurrentUsersPlaylists(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.getAListOfCurrentUsersPlaylists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
         * @summary Get Featured Playlists 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturedPlaylists(locale?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingFeaturedPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeaturedPlaylists(locale, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.getFeaturedPlaylists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListUsersPlaylists(userId, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.getListUsersPlaylists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a playlist owned by a Spotify user. 
         * @summary Get Playlist 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylist(playlistId: string, market?: string, fields?: string, additionalTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylist(playlistId, market, fields, additionalTypes, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.getPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current image associated with a specific playlist. 
         * @summary Get Playlist Cover Image 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistCover(playlistId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ImageObject>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylistCover(playlistId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.getPlaylistCover']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.getPlaylistsTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.removeTracksPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderOrReplacePlaylistsTracks(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.reorderOrReplacePlaylistsTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowPlaylist(playlistId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowPlaylist(playlistId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.unfollowPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Replace the image used to represent a specific playlist. 
         * @summary Add Custom Playlist Cover Image 
         * @param {string} playlistId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadCustomPlaylistCover(playlistId: string, body: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCustomPlaylistCover(playlistId, body, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PlaylistsApi.uploadCustomPlaylistCover']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PlaylistsApi - factory interface
 * @export
 */
export const PlaylistsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaylistsApiFp(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.addTracksToPlaylist(playlistId, position, uris, addTracksToPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
         * @summary Change Playlist Details 
         * @param {string} playlistId 
         * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.changePlaylistDetails(playlistId, changePlaylistDetailsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
         * @summary Create Playlist 
         * @param {string} userId 
         * @param {CreatePlaylistRequest} [createPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: any): AxiosPromise<PlaylistObject> {
            return localVarFp.createPlaylist(userId, createPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {FollowPlaylistRequest} [followPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: any): AxiosPromise<void> {
            return localVarFp.followPlaylist(playlistId, followPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Spotify playlists tagged with a particular category. 
         * @summary Get Category\'s Playlists 
         * @param {string} categoryId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingFeaturedPlaylistObject> {
            return localVarFp.getACategoriesPlaylists(categoryId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by the current Spotify user. 
         * @summary Get Current User\'s Playlists 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
         * @summary Get Featured Playlists 
         * @param {string} [locale] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedPlaylists(locale?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingFeaturedPlaylistObject> {
            return localVarFp.getFeaturedPlaylists(locale, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getListUsersPlaylists(userId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a playlist owned by a Spotify user. 
         * @summary Get Playlist 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylist(playlistId: string, market?: string, fields?: string, additionalTypes?: string, options?: any): AxiosPromise<PlaylistObject> {
            return localVarFp.getPlaylist(playlistId, market, fields, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current image associated with a specific playlist. 
         * @summary Get Playlist Cover Image 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistCover(playlistId: string, options?: any): AxiosPromise<Array<ImageObject>> {
            return localVarFp.getPlaylistCover(playlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: any): AxiosPromise<PagingPlaylistTrackObject> {
            return localVarFp.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.reorderOrReplacePlaylistsTracks(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist(playlistId: string, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowPlaylist(playlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace the image used to represent a specific playlist. 
         * @summary Add Custom Playlist Cover Image 
         * @param {string} playlistId 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadCustomPlaylistCover(playlistId: string, body: string, options?: any): AxiosPromise<void> {
            return localVarFp.uploadCustomPlaylistCover(playlistId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaylistsApi - interface
 * @export
 * @interface PlaylistsApi
 */
export interface PlaylistsApiInterface {
    /**
     * Add one or more items to a user\'s playlist. 
     * @summary Add Items to Playlist 
     * @param {string} playlistId 
     * @param {number} [position] 
     * @param {string} [uris] 
     * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>;

    /**
     * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
     * @summary Change Playlist Details 
     * @param {string} playlistId 
     * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @summary Check if Users Follow Playlist 
     * @param {string} playlistId 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @summary Create Playlist 
     * @param {string} userId 
     * @param {CreatePlaylistRequest} [createPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistObject>;

    /**
     * Add the current user as a follower of a playlist. 
     * @summary Follow Playlist 
     * @param {string} playlistId 
     * @param {FollowPlaylistRequest} [followPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get a list of Spotify playlists tagged with a particular category. 
     * @summary Get Category\'s Playlists 
     * @param {string} categoryId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingFeaturedPlaylistObject>;

    /**
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @summary Get Current User\'s Playlists 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingPlaylistObject>;

    /**
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
     * @summary Get Featured Playlists 
     * @param {string} [locale] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    getFeaturedPlaylists(locale?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingFeaturedPlaylistObject>;

    /**
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @summary Get User\'s Playlists 
     * @param {string} userId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingPlaylistObject>;

    /**
     * Get a playlist owned by a Spotify user. 
     * @summary Get Playlist 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    getPlaylist(playlistId: string, market?: string, fields?: string, additionalTypes?: string, options?: RawAxiosRequestConfig): AxiosPromise<PlaylistObject>;

    /**
     * Get the current image associated with a specific playlist. 
     * @summary Get Playlist Cover Image 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    getPlaylistCover(playlistId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ImageObject>>;

    /**
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @summary Get Playlist Items 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: RawAxiosRequestConfig): AxiosPromise<PagingPlaylistTrackObject>;

    /**
     * Remove one or more items from a user\'s playlist. 
     * @summary Remove Playlist Items 
     * @param {string} playlistId 
     * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>;

    /**
     * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
     * @summary Update Playlist Items 
     * @param {string} playlistId 
     * @param {string} [uris] 
     * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>;

    /**
     * Remove the current user as a follower of a playlist. 
     * @summary Unfollow Playlist 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    unfollowPlaylist(playlistId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Replace the image used to represent a specific playlist. 
     * @summary Add Custom Playlist Cover Image 
     * @param {string} playlistId 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApiInterface
     */
    uploadCustomPlaylistCover(playlistId: string, body: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * PlaylistsApi - object-oriented interface
 * @export
 * @class PlaylistsApi
 * @extends {BaseAPI}
 */
export class PlaylistsApi extends BaseAPI implements PlaylistsApiInterface {
    /**
     * Add one or more items to a user\'s playlist. 
     * @summary Add Items to Playlist 
     * @param {string} playlistId 
     * @param {number} [position] 
     * @param {string} [uris] 
     * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).addTracksToPlaylist(playlistId, position, uris, addTracksToPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change a playlist\'s name and public/private state. (The user must, of course, own the playlist.) 
     * @summary Change Playlist Details 
     * @param {string} playlistId 
     * @param {ChangePlaylistDetailsRequest} [changePlaylistDetailsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public changePlaylistDetails(playlistId: string, changePlaylistDetailsRequest?: ChangePlaylistDetailsRequest, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).changePlaylistDetails(playlistId, changePlaylistDetailsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @summary Check if Users Follow Playlist 
     * @param {string} playlistId 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a playlist for a Spotify user. (The playlist will be empty until you [add tracks](/documentation/web-api/reference/add-tracks-to-playlist).) Each user is generally limited to a maximum of 11000 playlists. 
     * @summary Create Playlist 
     * @param {string} userId 
     * @param {CreatePlaylistRequest} [createPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public createPlaylist(userId: string, createPlaylistRequest?: CreatePlaylistRequest, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).createPlaylist(userId, createPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of a playlist. 
     * @summary Follow Playlist 
     * @param {string} playlistId 
     * @param {FollowPlaylistRequest} [followPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).followPlaylist(playlistId, followPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of Spotify playlists tagged with a particular category. 
     * @summary Get Category\'s Playlists 
     * @param {string} categoryId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getACategoriesPlaylists(categoryId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getACategoriesPlaylists(categoryId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by the current Spotify user. 
     * @summary Get Current User\'s Playlists 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getAListOfCurrentUsersPlaylists(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getAListOfCurrentUsersPlaylists(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of Spotify featured playlists (shown, for example, on a Spotify player\'s \'Browse\' tab). 
     * @summary Get Featured Playlists 
     * @param {string} [locale] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getFeaturedPlaylists(locale?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getFeaturedPlaylists(locale, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @summary Get User\'s Playlists 
     * @param {string} userId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getListUsersPlaylists(userId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a playlist owned by a Spotify user. 
     * @summary Get Playlist 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getPlaylist(playlistId: string, market?: string, fields?: string, additionalTypes?: string, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getPlaylist(playlistId, market, fields, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current image associated with a specific playlist. 
     * @summary Get Playlist Cover Image 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getPlaylistCover(playlistId: string, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getPlaylistCover(playlistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @summary Get Playlist Items 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more items from a user\'s playlist. 
     * @summary Remove Playlist Items 
     * @param {string} playlistId 
     * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
     * @summary Update Playlist Items 
     * @param {string} playlistId 
     * @param {string} [uris] 
     * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).reorderOrReplacePlaylistsTracks(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of a playlist. 
     * @summary Unfollow Playlist 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public unfollowPlaylist(playlistId: string, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).unfollowPlaylist(playlistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace the image used to represent a specific playlist. 
     * @summary Add Custom Playlist Cover Image 
     * @param {string} playlistId 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistsApi
     */
    public uploadCustomPlaylistCover(playlistId: string, body: string, options?: RawAxiosRequestConfig) {
        return PlaylistsApiFp(this.configuration).uploadCustomPlaylistCover(playlistId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Search for Item 
         * @param {string} q 
         * @param {Array<SearchTypeEnum>} type 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {SearchIncludeExternalEnum} [includeExternal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (q: string, type: Array<SearchTypeEnum>, market?: string, limit?: number, offset?: number, includeExternal?: SearchIncludeExternalEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('search', 'q', q)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('search', 'type', type)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (type) {
                localVarQueryParameter['type'] = type.join(COLLECTION_FORMATS.csv);
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (includeExternal !== undefined) {
                localVarQueryParameter['include_external'] = includeExternal;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Search for Item 
         * @param {string} q 
         * @param {Array<SearchTypeEnum>} type 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {SearchIncludeExternalEnum} [includeExternal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(q: string, type: Array<SearchTypeEnum>, market?: string, limit?: number, offset?: number, includeExternal?: SearchIncludeExternalEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Search200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(q, type, market, limit, offset, includeExternal, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SearchApi.search']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
         * @summary Search for Item 
         * @param {string} q 
         * @param {Array<SearchTypeEnum>} type 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {SearchIncludeExternalEnum} [includeExternal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(q: string, type: Array<SearchTypeEnum>, market?: string, limit?: number, offset?: number, includeExternal?: SearchIncludeExternalEnum, options?: any): AxiosPromise<Search200Response> {
            return localVarFp.search(q, type, market, limit, offset, includeExternal, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SearchApi - interface
 * @export
 * @interface SearchApi
 */
export interface SearchApiInterface {
    /**
     * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Search for Item 
     * @param {string} q 
     * @param {Array<SearchTypeEnum>} type 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {SearchIncludeExternalEnum} [includeExternal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApiInterface
     */
    search(q: string, type: Array<SearchTypeEnum>, market?: string, limit?: number, offset?: number, includeExternal?: SearchIncludeExternalEnum, options?: RawAxiosRequestConfig): AxiosPromise<Search200Response>;

}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI implements SearchApiInterface {
    /**
     * Get Spotify catalog information about albums, artists, playlists, tracks, shows, episodes or audiobooks that match a keyword string. Audiobooks are only available within the US, UK, Canada, Ireland, New Zealand and Australia markets. 
     * @summary Search for Item 
     * @param {string} q 
     * @param {Array<SearchTypeEnum>} type 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {SearchIncludeExternalEnum} [includeExternal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public search(q: string, type: Array<SearchTypeEnum>, market?: string, limit?: number, offset?: number, includeExternal?: SearchIncludeExternalEnum, options?: RawAxiosRequestConfig) {
        return SearchApiFp(this.configuration).search(q, type, market, limit, offset, includeExternal, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SearchTypeEnum = {
    Album: 'album',
    Artist: 'artist',
    Playlist: 'playlist',
    Track: 'track',
    Show: 'show',
    Episode: 'episode',
    Audiobook: 'audiobook'
} as const;
export type SearchTypeEnum = typeof SearchTypeEnum[keyof typeof SearchTypeEnum];
/**
 * @export
 */
export const SearchIncludeExternalEnum = {
    Audio: 'audio'
} as const;
export type SearchIncludeExternalEnum = typeof SearchIncludeExternalEnum[keyof typeof SearchIncludeExternalEnum];


/**
 * ShowsApi - axios parameter creator
 * @export
 */
export const ShowsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedShows', 'ids', ids)
            const localVarPath = `/me/shows/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
         * @summary Get Show 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShow: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAShow', 'id', id)
            const localVarPath = `/shows/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes: async (id: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAShowsEpisodes', 'id', id)
            const localVarPath = `/shows/{id}/episodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-playback-position"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for several shows based on their Spotify IDs. 
         * @summary Get Several Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleShows: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getMultipleShows', 'ids', ids)
            const localVarPath = `/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveShowsUser', 'ids', ids)
            const localVarPath = `/me/shows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowsApi - functional programming interface
 * @export
 */
export const ShowsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowsApiAxiosParamCreator(configuration)
    return {
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedShows(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedShows(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ShowsApi.checkUsersSavedShows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
         * @summary Get Show 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAShow(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShowObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAShow(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ShowsApi.getAShow']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedEpisodeObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAShowsEpisodes(id, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ShowsApi.getAShowsEpisodes']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for several shows based on their Spotify IDs. 
         * @summary Get Several Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMultipleShows(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMultipleShows200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMultipleShows(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ShowsApi.getMultipleShows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedShows(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedShowObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedShows(limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ShowsApi.getUsersSavedShows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeShowsUser(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeShowsUser(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ShowsApi.removeShowsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveShowsUser(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveShowsUser(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ShowsApi.saveShowsUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ShowsApi - factory interface
 * @export
 */
export const ShowsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowsApiFp(configuration)
    return {
        /**
         * Check if one or more shows is already saved in the current Spotify user\'s library. 
         * @summary Check User\'s Saved Shows 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedShows(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedShows(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
         * @summary Get Show 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShow(id: string, market?: string, options?: any): AxiosPromise<ShowObject> {
            return localVarFp.getAShow(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
         * @summary Get Show Episodes 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedEpisodeObject> {
            return localVarFp.getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for several shows based on their Spotify IDs. 
         * @summary Get Several Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMultipleShows(ids: string, market?: string, options?: any): AxiosPromise<GetMultipleShows200Response> {
            return localVarFp.getMultipleShows(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
         * @summary Get User\'s Saved Shows 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedShows(limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedShowObject> {
            return localVarFp.getUsersSavedShows(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete one or more shows from current Spotify user\'s library. 
         * @summary Remove User\'s Saved Shows 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeShowsUser(ids: string, market?: string, options?: any): AxiosPromise<void> {
            return localVarFp.removeShowsUser(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more shows to current Spotify user\'s library. 
         * @summary Save Shows for Current User 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveShowsUser(ids: string, options?: any): AxiosPromise<void> {
            return localVarFp.saveShowsUser(ids, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowsApi - interface
 * @export
 * @interface ShowsApi
 */
export interface ShowsApiInterface {
    /**
     * Check if one or more shows is already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Shows 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApiInterface
     */
    checkUsersSavedShows(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
     * @summary Get Show 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApiInterface
     */
    getAShow(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<ShowObject>;

    /**
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @summary Get Show Episodes 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApiInterface
     */
    getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedEpisodeObject>;

    /**
     * Get Spotify catalog information for several shows based on their Spotify IDs. 
     * @summary Get Several Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApiInterface
     */
    getMultipleShows(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetMultipleShows200Response>;

    /**
     * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
     * @summary Get User\'s Saved Shows 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApiInterface
     */
    getUsersSavedShows(limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedShowObject>;

    /**
     * Delete one or more shows from current Spotify user\'s library. 
     * @summary Remove User\'s Saved Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApiInterface
     */
    removeShowsUser(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Save one or more shows to current Spotify user\'s library. 
     * @summary Save Shows for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApiInterface
     */
    saveShowsUser(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ShowsApi - object-oriented interface
 * @export
 * @class ShowsApi
 * @extends {BaseAPI}
 */
export class ShowsApi extends BaseAPI implements ShowsApiInterface {
    /**
     * Check if one or more shows is already saved in the current Spotify user\'s library. 
     * @summary Check User\'s Saved Shows 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public checkUsersSavedShows(ids: string, options?: RawAxiosRequestConfig) {
        return ShowsApiFp(this.configuration).checkUsersSavedShows(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single show identified by its unique Spotify ID. 
     * @summary Get Show 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getAShow(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getAShow(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an show’s episodes. Optional parameters can be used to limit the number of episodes returned. 
     * @summary Get Show Episodes 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getAShowsEpisodes(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getAShowsEpisodes(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for several shows based on their Spotify IDs. 
     * @summary Get Several Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getMultipleShows(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getMultipleShows(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of shows saved in the current Spotify user\'s library. Optional parameters can be used to limit the number of shows returned. 
     * @summary Get User\'s Saved Shows 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public getUsersSavedShows(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return ShowsApiFp(this.configuration).getUsersSavedShows(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete one or more shows from current Spotify user\'s library. 
     * @summary Remove User\'s Saved Shows 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public removeShowsUser(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return ShowsApiFp(this.configuration).removeShowsUser(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more shows to current Spotify user\'s library. 
     * @summary Save Shows for Current User 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowsApi
     */
    public saveShowsUser(ids: string, options?: RawAxiosRequestConfig) {
        return ShowsApiFp(this.configuration).saveShowsUser(ids, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TracksApi - axios parameter creator
 * @export
 */
export const TracksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist: async (playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('addTracksToPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (position !== undefined) {
                localVarQueryParameter['position'] = position;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addTracksToPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkUsersSavedTracks', 'ids', ids)
            const localVarPath = `/me/tracks/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks: async (id: string, market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnAlbumsTracks', 'id', id)
            const localVarPath = `/albums/{id}/tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnArtistsTopTracks', 'id', id)
            const localVarPath = `/artists/{id}/top-tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
         * @summary Get Track\'s Audio Analysis 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioAnalysis: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudioAnalysis', 'id', id)
            const localVarPath = `/audio-analysis/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audio feature information for a single track identified by its unique Spotify ID. 
         * @summary Get Track\'s Audio Features 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFeatures: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAudioFeatures', 'id', id)
            const localVarPath = `/audio-features/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks: async (playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('getPlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (additionalTypes !== undefined) {
                localVarQueryParameter['additional_types'] = additionalTypes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
         * @summary Get Recommendations 
         * @param {string} seedArtists 
         * @param {string} seedGenres 
         * @param {string} seedTracks 
         * @param {number} [limit] 
         * @param {string} [market] 
         * @param {number} [minAcousticness] 
         * @param {number} [maxAcousticness] 
         * @param {number} [targetAcousticness] 
         * @param {number} [minDanceability] 
         * @param {number} [maxDanceability] 
         * @param {number} [targetDanceability] 
         * @param {number} [minDurationMs] 
         * @param {number} [maxDurationMs] 
         * @param {number} [targetDurationMs] 
         * @param {number} [minEnergy] 
         * @param {number} [maxEnergy] 
         * @param {number} [targetEnergy] 
         * @param {number} [minInstrumentalness] 
         * @param {number} [maxInstrumentalness] 
         * @param {number} [targetInstrumentalness] 
         * @param {number} [minKey] 
         * @param {number} [maxKey] 
         * @param {number} [targetKey] 
         * @param {number} [minLiveness] 
         * @param {number} [maxLiveness] 
         * @param {number} [targetLiveness] 
         * @param {number} [minLoudness] 
         * @param {number} [maxLoudness] 
         * @param {number} [targetLoudness] 
         * @param {number} [minMode] 
         * @param {number} [maxMode] 
         * @param {number} [targetMode] 
         * @param {number} [minPopularity] 
         * @param {number} [maxPopularity] 
         * @param {number} [targetPopularity] 
         * @param {number} [minSpeechiness] 
         * @param {number} [maxSpeechiness] 
         * @param {number} [targetSpeechiness] 
         * @param {number} [minTempo] 
         * @param {number} [maxTempo] 
         * @param {number} [targetTempo] 
         * @param {number} [minTimeSignature] 
         * @param {number} [maxTimeSignature] 
         * @param {number} [targetTimeSignature] 
         * @param {number} [minValence] 
         * @param {number} [maxValence] 
         * @param {number} [targetValence] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendations: async (seedArtists: string, seedGenres: string, seedTracks: string, limit?: number, market?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seedArtists' is not null or undefined
            assertParamExists('getRecommendations', 'seedArtists', seedArtists)
            // verify required parameter 'seedGenres' is not null or undefined
            assertParamExists('getRecommendations', 'seedGenres', seedGenres)
            // verify required parameter 'seedTracks' is not null or undefined
            assertParamExists('getRecommendations', 'seedTracks', seedTracks)
            const localVarPath = `/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (seedArtists !== undefined) {
                localVarQueryParameter['seed_artists'] = seedArtists;
            }

            if (seedGenres !== undefined) {
                localVarQueryParameter['seed_genres'] = seedGenres;
            }

            if (seedTracks !== undefined) {
                localVarQueryParameter['seed_tracks'] = seedTracks;
            }

            if (minAcousticness !== undefined) {
                localVarQueryParameter['min_acousticness'] = minAcousticness;
            }

            if (maxAcousticness !== undefined) {
                localVarQueryParameter['max_acousticness'] = maxAcousticness;
            }

            if (targetAcousticness !== undefined) {
                localVarQueryParameter['target_acousticness'] = targetAcousticness;
            }

            if (minDanceability !== undefined) {
                localVarQueryParameter['min_danceability'] = minDanceability;
            }

            if (maxDanceability !== undefined) {
                localVarQueryParameter['max_danceability'] = maxDanceability;
            }

            if (targetDanceability !== undefined) {
                localVarQueryParameter['target_danceability'] = targetDanceability;
            }

            if (minDurationMs !== undefined) {
                localVarQueryParameter['min_duration_ms'] = minDurationMs;
            }

            if (maxDurationMs !== undefined) {
                localVarQueryParameter['max_duration_ms'] = maxDurationMs;
            }

            if (targetDurationMs !== undefined) {
                localVarQueryParameter['target_duration_ms'] = targetDurationMs;
            }

            if (minEnergy !== undefined) {
                localVarQueryParameter['min_energy'] = minEnergy;
            }

            if (maxEnergy !== undefined) {
                localVarQueryParameter['max_energy'] = maxEnergy;
            }

            if (targetEnergy !== undefined) {
                localVarQueryParameter['target_energy'] = targetEnergy;
            }

            if (minInstrumentalness !== undefined) {
                localVarQueryParameter['min_instrumentalness'] = minInstrumentalness;
            }

            if (maxInstrumentalness !== undefined) {
                localVarQueryParameter['max_instrumentalness'] = maxInstrumentalness;
            }

            if (targetInstrumentalness !== undefined) {
                localVarQueryParameter['target_instrumentalness'] = targetInstrumentalness;
            }

            if (minKey !== undefined) {
                localVarQueryParameter['min_key'] = minKey;
            }

            if (maxKey !== undefined) {
                localVarQueryParameter['max_key'] = maxKey;
            }

            if (targetKey !== undefined) {
                localVarQueryParameter['target_key'] = targetKey;
            }

            if (minLiveness !== undefined) {
                localVarQueryParameter['min_liveness'] = minLiveness;
            }

            if (maxLiveness !== undefined) {
                localVarQueryParameter['max_liveness'] = maxLiveness;
            }

            if (targetLiveness !== undefined) {
                localVarQueryParameter['target_liveness'] = targetLiveness;
            }

            if (minLoudness !== undefined) {
                localVarQueryParameter['min_loudness'] = minLoudness;
            }

            if (maxLoudness !== undefined) {
                localVarQueryParameter['max_loudness'] = maxLoudness;
            }

            if (targetLoudness !== undefined) {
                localVarQueryParameter['target_loudness'] = targetLoudness;
            }

            if (minMode !== undefined) {
                localVarQueryParameter['min_mode'] = minMode;
            }

            if (maxMode !== undefined) {
                localVarQueryParameter['max_mode'] = maxMode;
            }

            if (targetMode !== undefined) {
                localVarQueryParameter['target_mode'] = targetMode;
            }

            if (minPopularity !== undefined) {
                localVarQueryParameter['min_popularity'] = minPopularity;
            }

            if (maxPopularity !== undefined) {
                localVarQueryParameter['max_popularity'] = maxPopularity;
            }

            if (targetPopularity !== undefined) {
                localVarQueryParameter['target_popularity'] = targetPopularity;
            }

            if (minSpeechiness !== undefined) {
                localVarQueryParameter['min_speechiness'] = minSpeechiness;
            }

            if (maxSpeechiness !== undefined) {
                localVarQueryParameter['max_speechiness'] = maxSpeechiness;
            }

            if (targetSpeechiness !== undefined) {
                localVarQueryParameter['target_speechiness'] = targetSpeechiness;
            }

            if (minTempo !== undefined) {
                localVarQueryParameter['min_tempo'] = minTempo;
            }

            if (maxTempo !== undefined) {
                localVarQueryParameter['max_tempo'] = maxTempo;
            }

            if (targetTempo !== undefined) {
                localVarQueryParameter['target_tempo'] = targetTempo;
            }

            if (minTimeSignature !== undefined) {
                localVarQueryParameter['min_time_signature'] = minTimeSignature;
            }

            if (maxTimeSignature !== undefined) {
                localVarQueryParameter['max_time_signature'] = maxTimeSignature;
            }

            if (targetTimeSignature !== undefined) {
                localVarQueryParameter['target_time_signature'] = targetTimeSignature;
            }

            if (minValence !== undefined) {
                localVarQueryParameter['min_valence'] = minValence;
            }

            if (maxValence !== undefined) {
                localVarQueryParameter['max_valence'] = maxValence;
            }

            if (targetValence !== undefined) {
                localVarQueryParameter['target_valence'] = targetValence;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get audio features for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks\' Audio Features 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralAudioFeatures: async (ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getSeveralAudioFeatures', 'ids', ids)
            const localVarPath = `/audio-features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralTracks: async (ids: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getSeveralTracks', 'ids', ids)
            const localVarPath = `/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
         * @summary Get Track 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrack: async (id: string, market?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrack', 'id', id)
            const localVarPath = `/tracks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks: async (market?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-read"], configuration)

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtistsAndTracks: async (type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getUsersTopArtistsAndTracks', 'type', type)
            const localVarPath = `/me/top/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist: async (playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('removeTracksPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeTracksPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser: async (ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('removeTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveAlbumsUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks: async (playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('reorderOrReplacePlaylistsTracks', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/tracks`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reorderOrReplacePlaylistsTracksRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser: async (ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('saveTracksUser', 'ids', ids)
            const localVarPath = `/me/tracks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-library-modify"], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(saveTracksUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TracksApi - functional programming interface
 * @export
 */
export const TracksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TracksApiAxiosParamCreator(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTracksToPlaylist(playlistId, position, uris, addTracksToPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.addTracksToPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUsersSavedTracks(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUsersSavedTracks(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.checkUsersSavedTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSimplifiedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnAlbumsTracks(id, market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getAnAlbumsTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnArtistsTopTracks(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAnArtistsTopTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnArtistsTopTracks(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getAnArtistsTopTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
         * @summary Get Track\'s Audio Analysis 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioAnalysis(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioAnalysisObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioAnalysis(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getAudioAnalysis']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get audio feature information for a single track identified by its unique Spotify ID. 
         * @summary Get Track\'s Audio Features 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudioFeatures(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AudioFeaturesObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudioFeatures(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getAudioFeatures']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getPlaylistsTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
         * @summary Get Recommendations 
         * @param {string} seedArtists 
         * @param {string} seedGenres 
         * @param {string} seedTracks 
         * @param {number} [limit] 
         * @param {string} [market] 
         * @param {number} [minAcousticness] 
         * @param {number} [maxAcousticness] 
         * @param {number} [targetAcousticness] 
         * @param {number} [minDanceability] 
         * @param {number} [maxDanceability] 
         * @param {number} [targetDanceability] 
         * @param {number} [minDurationMs] 
         * @param {number} [maxDurationMs] 
         * @param {number} [targetDurationMs] 
         * @param {number} [minEnergy] 
         * @param {number} [maxEnergy] 
         * @param {number} [targetEnergy] 
         * @param {number} [minInstrumentalness] 
         * @param {number} [maxInstrumentalness] 
         * @param {number} [targetInstrumentalness] 
         * @param {number} [minKey] 
         * @param {number} [maxKey] 
         * @param {number} [targetKey] 
         * @param {number} [minLiveness] 
         * @param {number} [maxLiveness] 
         * @param {number} [targetLiveness] 
         * @param {number} [minLoudness] 
         * @param {number} [maxLoudness] 
         * @param {number} [targetLoudness] 
         * @param {number} [minMode] 
         * @param {number} [maxMode] 
         * @param {number} [targetMode] 
         * @param {number} [minPopularity] 
         * @param {number} [maxPopularity] 
         * @param {number} [targetPopularity] 
         * @param {number} [minSpeechiness] 
         * @param {number} [maxSpeechiness] 
         * @param {number} [targetSpeechiness] 
         * @param {number} [minTempo] 
         * @param {number} [maxTempo] 
         * @param {number} [targetTempo] 
         * @param {number} [minTimeSignature] 
         * @param {number} [maxTimeSignature] 
         * @param {number} [targetTimeSignature] 
         * @param {number} [minValence] 
         * @param {number} [maxValence] 
         * @param {number} [targetValence] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecommendations(seedArtists: string, seedGenres: string, seedTracks: string, limit?: number, market?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecommendationsObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecommendations(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getRecommendations']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get audio features for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks\' Audio Features 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeveralAudioFeatures(ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSeveralAudioFeatures200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeveralAudioFeatures(ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getSeveralAudioFeatures']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSeveralTracks(ids: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAnArtistsTopTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSeveralTracks(ids, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getSeveralTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
         * @summary Get Track 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrack(id: string, market?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrack(id, market, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getTrack']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingSavedTrackObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersSavedTracks(market, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getUsersSavedTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersTopArtistsAndTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.getUsersTopArtistsAndTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.removeTracksPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeTracksUser(ids, saveAlbumsUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.removeTracksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reorderOrReplacePlaylistsTracks(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.reorderOrReplacePlaylistsTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveTracksUser(ids, saveTracksUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TracksApi.saveTracksUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TracksApi - factory interface
 * @export
 */
export const TracksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TracksApiFp(configuration)
    return {
        /**
         * Add one or more items to a user\'s playlist. 
         * @summary Add Items to Playlist 
         * @param {string} playlistId 
         * @param {number} [position] 
         * @param {string} [uris] 
         * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.addTracksToPlaylist(playlistId, position, uris, addTracksToPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Check User\'s Saved Tracks 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUsersSavedTracks(ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkUsersSavedTracks(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
         * @summary Get Album Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSimplifiedTrackObject> {
            return localVarFp.getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information about an artist\'s top tracks by country. 
         * @summary Get Artist\'s Top Tracks 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnArtistsTopTracks(id: string, market?: string, options?: any): AxiosPromise<GetAnArtistsTopTracks200Response> {
            return localVarFp.getAnArtistsTopTracks(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
         * @summary Get Track\'s Audio Analysis 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioAnalysis(id: string, options?: any): AxiosPromise<AudioAnalysisObject> {
            return localVarFp.getAudioAnalysis(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audio feature information for a single track identified by its unique Spotify ID. 
         * @summary Get Track\'s Audio Features 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudioFeatures(id: string, options?: any): AxiosPromise<AudioFeaturesObject> {
            return localVarFp.getAudioFeatures(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full details of the items of a playlist owned by a Spotify user. 
         * @summary Get Playlist Items 
         * @param {string} playlistId 
         * @param {string} [market] 
         * @param {string} [fields] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [additionalTypes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: any): AxiosPromise<PagingPlaylistTrackObject> {
            return localVarFp.getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
         * @summary Get Recommendations 
         * @param {string} seedArtists 
         * @param {string} seedGenres 
         * @param {string} seedTracks 
         * @param {number} [limit] 
         * @param {string} [market] 
         * @param {number} [minAcousticness] 
         * @param {number} [maxAcousticness] 
         * @param {number} [targetAcousticness] 
         * @param {number} [minDanceability] 
         * @param {number} [maxDanceability] 
         * @param {number} [targetDanceability] 
         * @param {number} [minDurationMs] 
         * @param {number} [maxDurationMs] 
         * @param {number} [targetDurationMs] 
         * @param {number} [minEnergy] 
         * @param {number} [maxEnergy] 
         * @param {number} [targetEnergy] 
         * @param {number} [minInstrumentalness] 
         * @param {number} [maxInstrumentalness] 
         * @param {number} [targetInstrumentalness] 
         * @param {number} [minKey] 
         * @param {number} [maxKey] 
         * @param {number} [targetKey] 
         * @param {number} [minLiveness] 
         * @param {number} [maxLiveness] 
         * @param {number} [targetLiveness] 
         * @param {number} [minLoudness] 
         * @param {number} [maxLoudness] 
         * @param {number} [targetLoudness] 
         * @param {number} [minMode] 
         * @param {number} [maxMode] 
         * @param {number} [targetMode] 
         * @param {number} [minPopularity] 
         * @param {number} [maxPopularity] 
         * @param {number} [targetPopularity] 
         * @param {number} [minSpeechiness] 
         * @param {number} [maxSpeechiness] 
         * @param {number} [targetSpeechiness] 
         * @param {number} [minTempo] 
         * @param {number} [maxTempo] 
         * @param {number} [targetTempo] 
         * @param {number} [minTimeSignature] 
         * @param {number} [maxTimeSignature] 
         * @param {number} [targetTimeSignature] 
         * @param {number} [minValence] 
         * @param {number} [maxValence] 
         * @param {number} [targetValence] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecommendations(seedArtists: string, seedGenres: string, seedTracks: string, limit?: number, market?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options?: any): AxiosPromise<RecommendationsObject> {
            return localVarFp.getRecommendations(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, options).then((request) => request(axios, basePath));
        },
        /**
         * Get audio features for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks\' Audio Features 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralAudioFeatures(ids: string, options?: any): AxiosPromise<GetSeveralAudioFeatures200Response> {
            return localVarFp.getSeveralAudioFeatures(ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
         * @summary Get Several Tracks 
         * @param {string} ids 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeveralTracks(ids: string, market?: string, options?: any): AxiosPromise<GetAnArtistsTopTracks200Response> {
            return localVarFp.getSeveralTracks(ids, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
         * @summary Get Track 
         * @param {string} id 
         * @param {string} [market] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrack(id: string, market?: string, options?: any): AxiosPromise<TrackObject> {
            return localVarFp.getTrack(id, market, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
         * @summary Get User\'s Saved Tracks 
         * @param {string} [market] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingSavedTrackObject> {
            return localVarFp.getUsersSavedTracks(market, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<GetUsersTopArtistsAndTracks200Response> {
            return localVarFp.getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more items from a user\'s playlist. 
         * @summary Remove Playlist Items 
         * @param {string} playlistId 
         * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove one or more tracks from the current user\'s \'Your Music\' library. 
         * @summary Remove User\'s Saved Tracks 
         * @param {string} ids 
         * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeTracksUser(ids, saveAlbumsUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
         * @summary Update Playlist Items 
         * @param {string} playlistId 
         * @param {string} [uris] 
         * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: any): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response> {
            return localVarFp.reorderOrReplacePlaylistsTracks(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Save one or more tracks to the current user\'s \'Your Music\' library. 
         * @summary Save Tracks for Current User 
         * @param {string} ids 
         * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: any): AxiosPromise<void> {
            return localVarFp.saveTracksUser(ids, saveTracksUserRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TracksApi - interface
 * @export
 * @interface TracksApi
 */
export interface TracksApiInterface {
    /**
     * Add one or more items to a user\'s playlist. 
     * @summary Add Items to Playlist 
     * @param {string} playlistId 
     * @param {number} [position] 
     * @param {string} [uris] 
     * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>;

    /**
     * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Tracks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    checkUsersSavedTracks(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @summary Get Album Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSimplifiedTrackObject>;

    /**
     * Get Spotify catalog information about an artist\'s top tracks by country. 
     * @summary Get Artist\'s Top Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getAnArtistsTopTracks(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAnArtistsTopTracks200Response>;

    /**
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @summary Get Track\'s Audio Analysis 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getAudioAnalysis(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AudioAnalysisObject>;

    /**
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @summary Get Track\'s Audio Features 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getAudioFeatures(id: string, options?: RawAxiosRequestConfig): AxiosPromise<AudioFeaturesObject>;

    /**
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @summary Get Playlist Items 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: RawAxiosRequestConfig): AxiosPromise<PagingPlaylistTrackObject>;

    /**
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @summary Get Recommendations 
     * @param {string} seedArtists 
     * @param {string} seedGenres 
     * @param {string} seedTracks 
     * @param {number} [limit] 
     * @param {string} [market] 
     * @param {number} [minAcousticness] 
     * @param {number} [maxAcousticness] 
     * @param {number} [targetAcousticness] 
     * @param {number} [minDanceability] 
     * @param {number} [maxDanceability] 
     * @param {number} [targetDanceability] 
     * @param {number} [minDurationMs] 
     * @param {number} [maxDurationMs] 
     * @param {number} [targetDurationMs] 
     * @param {number} [minEnergy] 
     * @param {number} [maxEnergy] 
     * @param {number} [targetEnergy] 
     * @param {number} [minInstrumentalness] 
     * @param {number} [maxInstrumentalness] 
     * @param {number} [targetInstrumentalness] 
     * @param {number} [minKey] 
     * @param {number} [maxKey] 
     * @param {number} [targetKey] 
     * @param {number} [minLiveness] 
     * @param {number} [maxLiveness] 
     * @param {number} [targetLiveness] 
     * @param {number} [minLoudness] 
     * @param {number} [maxLoudness] 
     * @param {number} [targetLoudness] 
     * @param {number} [minMode] 
     * @param {number} [maxMode] 
     * @param {number} [targetMode] 
     * @param {number} [minPopularity] 
     * @param {number} [maxPopularity] 
     * @param {number} [targetPopularity] 
     * @param {number} [minSpeechiness] 
     * @param {number} [maxSpeechiness] 
     * @param {number} [targetSpeechiness] 
     * @param {number} [minTempo] 
     * @param {number} [maxTempo] 
     * @param {number} [targetTempo] 
     * @param {number} [minTimeSignature] 
     * @param {number} [maxTimeSignature] 
     * @param {number} [targetTimeSignature] 
     * @param {number} [minValence] 
     * @param {number} [maxValence] 
     * @param {number} [targetValence] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getRecommendations(seedArtists: string, seedGenres: string, seedTracks: string, limit?: number, market?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options?: RawAxiosRequestConfig): AxiosPromise<RecommendationsObject>;

    /**
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @summary Get Several Tracks\' Audio Features 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getSeveralAudioFeatures(ids: string, options?: RawAxiosRequestConfig): AxiosPromise<GetSeveralAudioFeatures200Response>;

    /**
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @summary Get Several Tracks 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getSeveralTracks(ids: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<GetAnArtistsTopTracks200Response>;

    /**
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @summary Get Track 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getTrack(id: string, market?: string, options?: RawAxiosRequestConfig): AxiosPromise<TrackObject>;

    /**
     * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Tracks 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingSavedTrackObject>;

    /**
     * Get the current user\'s top artists or tracks based on calculated affinity. 
     * @summary Get User\'s Top Items 
     * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetUsersTopArtistsAndTracks200Response>;

    /**
     * Remove one or more items from a user\'s playlist. 
     * @summary Remove Playlist Items 
     * @param {string} playlistId 
     * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>;

    /**
     * Remove one or more tracks from the current user\'s \'Your Music\' library. 
     * @summary Remove User\'s Saved Tracks 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
     * @summary Update Playlist Items 
     * @param {string} playlistId 
     * @param {string} [uris] 
     * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReorderOrReplacePlaylistsTracks200Response>;

    /**
     * Save one or more tracks to the current user\'s \'Your Music\' library. 
     * @summary Save Tracks for Current User 
     * @param {string} ids 
     * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApiInterface
     */
    saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * TracksApi - object-oriented interface
 * @export
 * @class TracksApi
 * @extends {BaseAPI}
 */
export class TracksApi extends BaseAPI implements TracksApiInterface {
    /**
     * Add one or more items to a user\'s playlist. 
     * @summary Add Items to Playlist 
     * @param {string} playlistId 
     * @param {number} [position] 
     * @param {string} [uris] 
     * @param {AddTracksToPlaylistRequest} [addTracksToPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public addTracksToPlaylist(playlistId: string, position?: number, uris?: string, addTracksToPlaylistRequest?: AddTracksToPlaylistRequest, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).addTracksToPlaylist(playlistId, position, uris, addTracksToPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if one or more tracks is already saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Check User\'s Saved Tracks 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public checkUsersSavedTracks(ids: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).checkUsersSavedTracks(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned. 
     * @summary Get Album Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAnAlbumsTracks(id: string, market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAnAlbumsTracks(id, market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information about an artist\'s top tracks by country. 
     * @summary Get Artist\'s Top Tracks 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAnArtistsTopTracks(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAnArtistsTopTracks(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a low-level audio analysis for a track in the Spotify catalog. The audio analysis describes the track’s structure and musical content, including rhythm, pitch, and timbre. 
     * @summary Get Track\'s Audio Analysis 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAudioAnalysis(id: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAudioAnalysis(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audio feature information for a single track identified by its unique Spotify ID. 
     * @summary Get Track\'s Audio Features 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getAudioFeatures(id: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getAudioFeatures(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get full details of the items of a playlist owned by a Spotify user. 
     * @summary Get Playlist Items 
     * @param {string} playlistId 
     * @param {string} [market] 
     * @param {string} [fields] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [additionalTypes] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getPlaylistsTracks(playlistId: string, market?: string, fields?: string, limit?: number, offset?: number, additionalTypes?: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getPlaylistsTracks(playlistId, market, fields, limit, offset, additionalTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Recommendations are generated based on the available information for a given seed entity and matched against similar artists and tracks. If there is sufficient information about the provided seeds, a list of tracks will be returned together with pool size details.  For artists and tracks that are very new or obscure there might not be enough data to generate a list of tracks. 
     * @summary Get Recommendations 
     * @param {string} seedArtists 
     * @param {string} seedGenres 
     * @param {string} seedTracks 
     * @param {number} [limit] 
     * @param {string} [market] 
     * @param {number} [minAcousticness] 
     * @param {number} [maxAcousticness] 
     * @param {number} [targetAcousticness] 
     * @param {number} [minDanceability] 
     * @param {number} [maxDanceability] 
     * @param {number} [targetDanceability] 
     * @param {number} [minDurationMs] 
     * @param {number} [maxDurationMs] 
     * @param {number} [targetDurationMs] 
     * @param {number} [minEnergy] 
     * @param {number} [maxEnergy] 
     * @param {number} [targetEnergy] 
     * @param {number} [minInstrumentalness] 
     * @param {number} [maxInstrumentalness] 
     * @param {number} [targetInstrumentalness] 
     * @param {number} [minKey] 
     * @param {number} [maxKey] 
     * @param {number} [targetKey] 
     * @param {number} [minLiveness] 
     * @param {number} [maxLiveness] 
     * @param {number} [targetLiveness] 
     * @param {number} [minLoudness] 
     * @param {number} [maxLoudness] 
     * @param {number} [targetLoudness] 
     * @param {number} [minMode] 
     * @param {number} [maxMode] 
     * @param {number} [targetMode] 
     * @param {number} [minPopularity] 
     * @param {number} [maxPopularity] 
     * @param {number} [targetPopularity] 
     * @param {number} [minSpeechiness] 
     * @param {number} [maxSpeechiness] 
     * @param {number} [targetSpeechiness] 
     * @param {number} [minTempo] 
     * @param {number} [maxTempo] 
     * @param {number} [targetTempo] 
     * @param {number} [minTimeSignature] 
     * @param {number} [maxTimeSignature] 
     * @param {number} [targetTimeSignature] 
     * @param {number} [minValence] 
     * @param {number} [maxValence] 
     * @param {number} [targetValence] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getRecommendations(seedArtists: string, seedGenres: string, seedTracks: string, limit?: number, market?: string, minAcousticness?: number, maxAcousticness?: number, targetAcousticness?: number, minDanceability?: number, maxDanceability?: number, targetDanceability?: number, minDurationMs?: number, maxDurationMs?: number, targetDurationMs?: number, minEnergy?: number, maxEnergy?: number, targetEnergy?: number, minInstrumentalness?: number, maxInstrumentalness?: number, targetInstrumentalness?: number, minKey?: number, maxKey?: number, targetKey?: number, minLiveness?: number, maxLiveness?: number, targetLiveness?: number, minLoudness?: number, maxLoudness?: number, targetLoudness?: number, minMode?: number, maxMode?: number, targetMode?: number, minPopularity?: number, maxPopularity?: number, targetPopularity?: number, minSpeechiness?: number, maxSpeechiness?: number, targetSpeechiness?: number, minTempo?: number, maxTempo?: number, targetTempo?: number, minTimeSignature?: number, maxTimeSignature?: number, targetTimeSignature?: number, minValence?: number, maxValence?: number, targetValence?: number, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getRecommendations(seedArtists, seedGenres, seedTracks, limit, market, minAcousticness, maxAcousticness, targetAcousticness, minDanceability, maxDanceability, targetDanceability, minDurationMs, maxDurationMs, targetDurationMs, minEnergy, maxEnergy, targetEnergy, minInstrumentalness, maxInstrumentalness, targetInstrumentalness, minKey, maxKey, targetKey, minLiveness, maxLiveness, targetLiveness, minLoudness, maxLoudness, targetLoudness, minMode, maxMode, targetMode, minPopularity, maxPopularity, targetPopularity, minSpeechiness, maxSpeechiness, targetSpeechiness, minTempo, maxTempo, targetTempo, minTimeSignature, maxTimeSignature, targetTimeSignature, minValence, maxValence, targetValence, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get audio features for multiple tracks based on their Spotify IDs. 
     * @summary Get Several Tracks\' Audio Features 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getSeveralAudioFeatures(ids: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getSeveralAudioFeatures(ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for multiple tracks based on their Spotify IDs. 
     * @summary Get Several Tracks 
     * @param {string} ids 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getSeveralTracks(ids: string, market?: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getSeveralTracks(ids, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Spotify catalog information for a single track identified by its unique Spotify ID. 
     * @summary Get Track 
     * @param {string} id 
     * @param {string} [market] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getTrack(id: string, market?: string, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getTrack(id, market, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the songs saved in the current Spotify user\'s \'Your Music\' library. 
     * @summary Get User\'s Saved Tracks 
     * @param {string} [market] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getUsersSavedTracks(market?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getUsersSavedTracks(market, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top artists or tracks based on calculated affinity. 
     * @summary Get User\'s Top Items 
     * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more items from a user\'s playlist. 
     * @summary Remove Playlist Items 
     * @param {string} playlistId 
     * @param {RemoveTracksPlaylistRequest} [removeTracksPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public removeTracksPlaylist(playlistId: string, removeTracksPlaylistRequest?: RemoveTracksPlaylistRequest, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).removeTracksPlaylist(playlistId, removeTracksPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove one or more tracks from the current user\'s \'Your Music\' library. 
     * @summary Remove User\'s Saved Tracks 
     * @param {string} ids 
     * @param {SaveAlbumsUserRequest} [saveAlbumsUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public removeTracksUser(ids: string, saveAlbumsUserRequest?: SaveAlbumsUserRequest, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).removeTracksUser(ids, saveAlbumsUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Either reorder or replace items in a playlist depending on the request\'s parameters. To reorder items, include `range_start`, `insert_before`, `range_length` and `snapshot_id` in the request\'s body. To replace items, include `uris` as either a query parameter or in the request\'s body. Replacing items in a playlist will overwrite its existing items. This operation can be used for replacing or clearing items in a playlist. <br/> **Note**: Replace and reorder are mutually exclusive operations which share the same endpoint, but have different parameters. These operations can\'t be applied together in a single request. 
     * @summary Update Playlist Items 
     * @param {string} playlistId 
     * @param {string} [uris] 
     * @param {ReorderOrReplacePlaylistsTracksRequest} [reorderOrReplacePlaylistsTracksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public reorderOrReplacePlaylistsTracks(playlistId: string, uris?: string, reorderOrReplacePlaylistsTracksRequest?: ReorderOrReplacePlaylistsTracksRequest, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).reorderOrReplacePlaylistsTracks(playlistId, uris, reorderOrReplacePlaylistsTracksRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Save one or more tracks to the current user\'s \'Your Music\' library. 
     * @summary Save Tracks for Current User 
     * @param {string} ids 
     * @param {SaveTracksUserRequest} [saveTracksUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TracksApi
     */
    public saveTracksUser(ids: string, saveTracksUserRequest?: SaveTracksUserRequest, options?: RawAxiosRequestConfig) {
        return TracksApiFp(this.configuration).saveTracksUser(ids, saveTracksUserRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetUsersTopArtistsAndTracksTypeEnum = {
    Artists: 'artists',
    Tracks: 'tracks'
} as const;
export type GetUsersTopArtistsAndTracksTypeEnum = typeof GetUsersTopArtistsAndTracksTypeEnum[keyof typeof GetUsersTopArtistsAndTracksTypeEnum];


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows: async (type: CheckCurrentUserFollowsTypeEnum, ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkCurrentUserFollows', 'ids', ids)
            const localVarPath = `/me/following/contains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist: async (playlistId: string, ids: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'playlistId', playlistId)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('checkIfUserFollowsPlaylist', 'ids', ids)
            const localVarPath = `/playlists/{playlist_id}/followers/contains`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers: async (type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('followArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('followArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followArtistsUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {FollowPlaylistRequest} [followPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist: async (playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('followPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(followPlaylistRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get detailed profile information about the current user (including the current user\'s username). 
         * @summary Get Current User\'s Profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUsersProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-read-private", "user-read-email"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed: async (type: GetFollowedTypeEnum, after?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getFollowed', 'type', type)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-read"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists: async (userId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getListUsersPlaylists', 'userId', userId)
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-read-private", "playlist-read-collaborative"], configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get public profile information about a Spotify user. 
         * @summary Get User\'s Profile 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersProfile: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUsersProfile', 'userId', userId)
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtistsAndTracks: async (type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getUsersTopArtistsAndTracks', 'type', type)
            const localVarPath = `/me/top/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-top-read"], configuration)

            if (timeRange !== undefined) {
                localVarQueryParameter['time_range'] = timeRange;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers: async (type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'type', type)
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('unfollowArtistsUsers', 'ids', ids)
            const localVarPath = `/me/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["user-follow-modify"], configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unfollowArtistsUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist: async (playlistId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('unfollowPlaylist', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlist_id}/followers`
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth_2_0 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth_2_0", ["playlist-modify-public", "playlist-modify-private"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkCurrentUserFollows(type, ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.checkCurrentUserFollows']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkIfUserFollowsPlaylist(playlistId, ids, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.checkIfUserFollowsPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followArtistsUsers(type, ids, followArtistsUsersRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.followArtistsUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {FollowPlaylistRequest} [followPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.followPlaylist(playlistId, followPlaylistRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.followPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get detailed profile information about the current user (including the current user\'s username). 
         * @summary Get Current User\'s Profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUsersProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PrivateUserObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUsersProfile(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.getCurrentUsersProfile']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFollowed200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollowed(type, after, limit, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.getFollowed']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagingPlaylistObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListUsersPlaylists(userId, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.getListUsersPlaylists']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get public profile information about a Spotify user. 
         * @summary Get User\'s Profile 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersProfile(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicUserObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersProfile(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.getUsersProfile']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUsersTopArtistsAndTracks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.getUsersTopArtistsAndTracks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.unfollowArtistsUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unfollowPlaylist(playlistId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unfollowPlaylist(playlistId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.unfollowPlaylist']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Check to see if the current user is following one or more artists or other Spotify users. 
         * @summary Check If User Follows Artists or Users 
         * @param {CheckCurrentUserFollowsTypeEnum} type 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkCurrentUserFollows(type, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Check to see if one or more Spotify users are following a specified playlist. 
         * @summary Check if Users Follow Playlist 
         * @param {string} playlistId 
         * @param {string} ids 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: any): AxiosPromise<Array<boolean>> {
            return localVarFp.checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of one or more artists or other Spotify users. 
         * @summary Follow Artists or Users 
         * @param {FollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.followArtistsUsers(type, ids, followArtistsUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Add the current user as a follower of a playlist. 
         * @summary Follow Playlist 
         * @param {string} playlistId 
         * @param {FollowPlaylistRequest} [followPlaylistRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: any): AxiosPromise<void> {
            return localVarFp.followPlaylist(playlistId, followPlaylistRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get detailed profile information about the current user (including the current user\'s username). 
         * @summary Get Current User\'s Profile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUsersProfile(options?: any): AxiosPromise<PrivateUserObject> {
            return localVarFp.getCurrentUsersProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s followed artists. 
         * @summary Get Followed Artists 
         * @param {GetFollowedTypeEnum} type 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: any): AxiosPromise<GetFollowed200Response> {
            return localVarFp.getFollowed(type, after, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of the playlists owned or followed by a Spotify user. 
         * @summary Get User\'s Playlists 
         * @param {string} userId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: any): AxiosPromise<PagingPlaylistObject> {
            return localVarFp.getListUsersPlaylists(userId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Get public profile information about a Spotify user. 
         * @summary Get User\'s Profile 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersProfile(userId: string, options?: any): AxiosPromise<PublicUserObject> {
            return localVarFp.getUsersProfile(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the current user\'s top artists or tracks based on calculated affinity. 
         * @summary Get User\'s Top Items 
         * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
         * @param {string} [timeRange] 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: any): AxiosPromise<GetUsersTopArtistsAndTracks200Response> {
            return localVarFp.getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of one or more artists or other Spotify users. 
         * @summary Unfollow Artists or Users 
         * @param {UnfollowArtistsUsersTypeEnum} type 
         * @param {string} ids 
         * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove the current user as a follower of a playlist. 
         * @summary Unfollow Playlist 
         * @param {string} playlistId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unfollowPlaylist(playlistId: string, options?: any): AxiosPromise<void> {
            return localVarFp.unfollowPlaylist(playlistId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {CheckCurrentUserFollowsTypeEnum} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @summary Check if Users Follow Playlist 
     * @param {string} playlistId 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<boolean>>;

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {FollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Add the current user as a follower of a playlist. 
     * @summary Follow Playlist 
     * @param {string} playlistId 
     * @param {FollowPlaylistRequest} [followPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Get detailed profile information about the current user (including the current user\'s username). 
     * @summary Get Current User\'s Profile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getCurrentUsersProfile(options?: RawAxiosRequestConfig): AxiosPromise<PrivateUserObject>;

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {GetFollowedTypeEnum} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetFollowed200Response>;

    /**
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @summary Get User\'s Playlists 
     * @param {string} userId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<PagingPlaylistObject>;

    /**
     * Get public profile information about a Spotify user. 
     * @summary Get User\'s Profile 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsersProfile(userId: string, options?: RawAxiosRequestConfig): AxiosPromise<PublicUserObject>;

    /**
     * Get the current user\'s top artists or tracks based on calculated affinity. 
     * @summary Get User\'s Top Items 
     * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): AxiosPromise<GetUsersTopArtistsAndTracks200Response>;

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {UnfollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Remove the current user as a follower of a playlist. 
     * @summary Unfollow Playlist 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    unfollowPlaylist(playlistId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * Check to see if the current user is following one or more artists or other Spotify users. 
     * @summary Check If User Follows Artists or Users 
     * @param {CheckCurrentUserFollowsTypeEnum} type 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public checkCurrentUserFollows(type: CheckCurrentUserFollowsTypeEnum, ids: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).checkCurrentUserFollows(type, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check to see if one or more Spotify users are following a specified playlist. 
     * @summary Check if Users Follow Playlist 
     * @param {string} playlistId 
     * @param {string} ids 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public checkIfUserFollowsPlaylist(playlistId: string, ids: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).checkIfUserFollowsPlaylist(playlistId, ids, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of one or more artists or other Spotify users. 
     * @summary Follow Artists or Users 
     * @param {FollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {FollowArtistsUsersRequest} [followArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public followArtistsUsers(type: FollowArtistsUsersTypeEnum, ids: string, followArtistsUsersRequest?: FollowArtistsUsersRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).followArtistsUsers(type, ids, followArtistsUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add the current user as a follower of a playlist. 
     * @summary Follow Playlist 
     * @param {string} playlistId 
     * @param {FollowPlaylistRequest} [followPlaylistRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public followPlaylist(playlistId: string, followPlaylistRequest?: FollowPlaylistRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).followPlaylist(playlistId, followPlaylistRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get detailed profile information about the current user (including the current user\'s username). 
     * @summary Get Current User\'s Profile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getCurrentUsersProfile(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getCurrentUsersProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s followed artists. 
     * @summary Get Followed Artists 
     * @param {GetFollowedTypeEnum} type 
     * @param {string} [after] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getFollowed(type: GetFollowedTypeEnum, after?: string, limit?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getFollowed(type, after, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user. 
     * @summary Get User\'s Playlists 
     * @param {string} userId 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getListUsersPlaylists(userId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getListUsersPlaylists(userId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get public profile information about a Spotify user. 
     * @summary Get User\'s Profile 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersProfile(userId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersProfile(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the current user\'s top artists or tracks based on calculated affinity. 
     * @summary Get User\'s Top Items 
     * @param {GetUsersTopArtistsAndTracksTypeEnum} type 
     * @param {string} [timeRange] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersTopArtistsAndTracks(type: GetUsersTopArtistsAndTracksTypeEnum, timeRange?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersTopArtistsAndTracks(type, timeRange, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of one or more artists or other Spotify users. 
     * @summary Unfollow Artists or Users 
     * @param {UnfollowArtistsUsersTypeEnum} type 
     * @param {string} ids 
     * @param {UnfollowArtistsUsersRequest} [unfollowArtistsUsersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public unfollowArtistsUsers(type: UnfollowArtistsUsersTypeEnum, ids: string, unfollowArtistsUsersRequest?: UnfollowArtistsUsersRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).unfollowArtistsUsers(type, ids, unfollowArtistsUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove the current user as a follower of a playlist. 
     * @summary Unfollow Playlist 
     * @param {string} playlistId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public unfollowPlaylist(playlistId: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).unfollowPlaylist(playlistId, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CheckCurrentUserFollowsTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type CheckCurrentUserFollowsTypeEnum = typeof CheckCurrentUserFollowsTypeEnum[keyof typeof CheckCurrentUserFollowsTypeEnum];
/**
 * @export
 */
export const FollowArtistsUsersTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type FollowArtistsUsersTypeEnum = typeof FollowArtistsUsersTypeEnum[keyof typeof FollowArtistsUsersTypeEnum];
/**
 * @export
 */
export const GetFollowedTypeEnum = {
    Artist: 'artist'
} as const;
export type GetFollowedTypeEnum = typeof GetFollowedTypeEnum[keyof typeof GetFollowedTypeEnum];
/**
 * @export
 */
export const GetUsersTopArtistsAndTracksTypeEnum = {
    Artists: 'artists',
    Tracks: 'tracks'
} as const;
export type GetUsersTopArtistsAndTracksTypeEnum = typeof GetUsersTopArtistsAndTracksTypeEnum[keyof typeof GetUsersTopArtistsAndTracksTypeEnum];
/**
 * @export
 */
export const UnfollowArtistsUsersTypeEnum = {
    Artist: 'artist',
    User: 'user'
} as const;
export type UnfollowArtistsUsersTypeEnum = typeof UnfollowArtistsUsersTypeEnum[keyof typeof UnfollowArtistsUsersTypeEnum];


